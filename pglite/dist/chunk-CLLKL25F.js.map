{"version":3,"sources":["../src/utils.ts"],"sourcesContent":["import type { PGliteInterface, Transaction } from './interface.js'\n\nexport const IN_NODE =\n  typeof process === 'object' &&\n  typeof process.versions === 'object' &&\n  typeof process.versions.node === 'string'\n\nexport async function makeLocateFile() {\n  const PGWASM_URL = new URL('../release/postgres.wasm', import.meta.url)\n  const PGSHARE_URL = new URL('../release/postgres.data', import.meta.url)\n  let fileURLToPath = (fileUrl: URL) => fileUrl.pathname\n  if (IN_NODE) {\n    fileURLToPath = (await import('url')).fileURLToPath\n  }\n  return (base: string) => {\n    let url: URL | null = null\n    switch (base) {\n      case 'postgres.data':\n        url = PGSHARE_URL\n        break\n      case 'postgres.wasm':\n        url = PGWASM_URL\n        break\n      default:\n        console.error('makeLocateFile', base)\n    }\n\n    if (url?.protocol === 'file:') {\n      return fileURLToPath(url)\n    }\n    return url?.toString() ?? ''\n  }\n}\n\nexport const uuid = (): string => {\n  // best case, `crypto.randomUUID` is available\n  if (globalThis.crypto?.randomUUID) {\n    return globalThis.crypto.randomUUID()\n  }\n\n  const bytes = new Uint8Array(16)\n\n  if (globalThis.crypto?.getRandomValues) {\n    // `crypto.getRandomValues` is available even in non-secure contexts\n    globalThis.crypto.getRandomValues(bytes)\n  } else {\n    // fallback to Math.random, if the Crypto API is completely missing\n    for (let i = 0; i < bytes.length; i++) {\n      bytes[i] = Math.floor(Math.random() * 256)\n    }\n  }\n\n  bytes[6] = (bytes[6] & 0x0f) | 0x40 // Set the 4 most significant bits to 0100\n  bytes[8] = (bytes[8] & 0x3f) | 0x80 // Set the 2 most significant bits to 10\n\n  const hexValues: string[] = []\n  bytes.forEach((byte) => {\n    hexValues.push(byte.toString(16).padStart(2, '0'))\n  })\n\n  return (\n    hexValues.slice(0, 4).join('') +\n    '-' +\n    hexValues.slice(4, 6).join('') +\n    '-' +\n    hexValues.slice(6, 8).join('') +\n    '-' +\n    hexValues.slice(8, 10).join('') +\n    '-' +\n    hexValues.slice(10).join('')\n  )\n}\n\nexport async function formatQuery(\n  pg: PGliteInterface | Transaction,\n  query: string,\n  params?: any[] | null,\n) {\n  if (!params || params.length === 0) {\n    // no params so no formatting needed\n    return query\n  }\n\n  // replace $1, $2, etc with  %1L, %2L, etc\n  const subbedQuery = query.replace(/\\$([0-9]+)/g, (_, num) => {\n    return '%' + num + 'L'\n  })\n\n  const ret = await pg.query<{\n    query: string\n  }>(\n    `SELECT format($1, ${params.map((_, i) => `$${i + 2}`).join(', ')}) as query`,\n    [subbedQuery, ...params],\n    {\n      setAllTypes: true,\n    },\n  )\n  return ret.rows[0].query\n}\n"],"mappings":"wCAAAA,IAEO,IAAMC,EACX,OAAO,SAAY,UACnB,OAAO,QAAQ,UAAa,UAC5B,OAAO,QAAQ,SAAS,MAAS,SAEnC,eAAsBC,GAAiB,CACrC,IAAMC,EAAa,IAAI,IAAI,2BAA4B,YAAY,GAAG,EAChEC,EAAc,IAAI,IAAI,2BAA4B,YAAY,GAAG,EACnEC,EAAiBC,GAAiBA,EAAQ,SAC9C,OAAIL,IACFI,GAAiB,KAAM,QAAO,KAAK,GAAG,eAEhCE,GAAiB,CACvB,IAAIC,EAAkB,KACtB,OAAQD,EAAM,CACZ,IAAK,gBACHC,EAAMJ,EACN,MACF,IAAK,gBACHI,EAAML,EACN,MACF,QACE,QAAQ,MAAM,iBAAkBI,CAAI,CACxC,CAEA,OAAIC,GAAK,WAAa,QACbH,EAAcG,CAAG,EAEnBA,GAAK,SAAS,GAAK,EAC5B,CACF,CAEO,IAAMC,EAAO,IAAc,CAEhC,GAAI,WAAW,QAAQ,WACrB,OAAO,WAAW,OAAO,WAAW,EAGtC,IAAMC,EAAQ,IAAI,WAAW,EAAE,EAE/B,GAAI,WAAW,QAAQ,gBAErB,WAAW,OAAO,gBAAgBA,CAAK,MAGvC,SAASC,EAAI,EAAGA,EAAID,EAAM,OAAQC,IAChCD,EAAMC,CAAC,EAAI,KAAK,MAAM,KAAK,OAAO,EAAI,GAAG,EAI7CD,EAAM,CAAC,EAAKA,EAAM,CAAC,EAAI,GAAQ,GAC/BA,EAAM,CAAC,EAAKA,EAAM,CAAC,EAAI,GAAQ,IAE/B,IAAME,EAAsB,CAAC,EAC7B,OAAAF,EAAM,QAASG,GAAS,CACtBD,EAAU,KAAKC,EAAK,SAAS,EAAE,EAAE,SAAS,EAAG,GAAG,CAAC,CACnD,CAAC,EAGCD,EAAU,MAAM,EAAG,CAAC,EAAE,KAAK,EAAE,EAC7B,IACAA,EAAU,MAAM,EAAG,CAAC,EAAE,KAAK,EAAE,EAC7B,IACAA,EAAU,MAAM,EAAG,CAAC,EAAE,KAAK,EAAE,EAC7B,IACAA,EAAU,MAAM,EAAG,EAAE,EAAE,KAAK,EAAE,EAC9B,IACAA,EAAU,MAAM,EAAE,EAAE,KAAK,EAAE,CAE/B,EAEA,eAAsBE,EACpBC,EACAC,EACAC,EACA,CACA,GAAI,CAACA,GAAUA,EAAO,SAAW,EAE/B,OAAOD,EAIT,IAAME,EAAcF,EAAM,QAAQ,cAAe,CAACG,EAAGC,IAC5C,IAAMA,EAAM,GACpB,EAWD,OATY,MAAML,EAAG,MAGnB,qBAAqBE,EAAO,IAAI,CAACE,EAAGR,IAAM,IAAIA,EAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,aACjE,CAACO,EAAa,GAAGD,CAAM,EACvB,CACE,YAAa,EACf,CACF,GACW,KAAK,CAAC,EAAE,KACrB","names":["init_esm_shims","IN_NODE","makeLocateFile","PGWASM_URL","PGSHARE_URL","fileURLToPath","fileUrl","base","url","uuid","bytes","i","hexValues","byte","formatQuery","pg","query","params","subbedQuery","_","num"]}