import{i as a}from"./chunk-TTNLE7CV.js";a();var l=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";async function p(){let t=new URL("./postgres.wasm",import.meta.url),r=new URL("./postgres.data",import.meta.url),e=o=>o.pathname;return l&&(e=(await import("url")).fileURLToPath),o=>{let n=null;switch(o){case"postgres.data":n=r;break;case"postgres.wasm":n=t;break;default:console.error("makeLocateFile",o)}return n?.protocol==="file:"?e(n):n?.toString()??""}}var f=()=>{if(globalThis.crypto?.randomUUID)return globalThis.crypto.randomUUID();let t=new Uint8Array(16);if(globalThis.crypto?.getRandomValues)globalThis.crypto.getRandomValues(t);else for(let e=0;e<t.length;e++)t[e]=Math.floor(Math.random()*256);t[6]=t[6]&15|64,t[8]=t[8]&63|128;let r=[];return t.forEach(e=>{r.push(e.toString(16).padStart(2,"0"))}),r.slice(0,4).join("")+"-"+r.slice(4,6).join("")+"-"+r.slice(6,8).join("")+"-"+r.slice(8,10).join("")+"-"+r.slice(10).join("")};async function g(t,r,e){if(!e||e.length===0)return r;let o=r.replace(/\$([0-9]+)/g,(i,s)=>"%"+s+"L");return(await t.query(`SELECT format($1, ${e.map((i,s)=>`$${s+2}`).join(", ")}) as query`,[o,...e],{setAllTypes:!0})).rows[0].query}export{l as a,p as b,f as c,g as d};
//# sourceMappingURL=chunk-WV37ZJ3Z.js.map