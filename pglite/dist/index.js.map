{"version":3,"sources":["../../../node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js","../../../node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js","../../../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js","../src/index.ts","../src/pglite.ts","../../../node_modules/.pnpm/async-mutex@0.4.1/node_modules/async-mutex/index.mjs","../src/postgresMod.ts","../src/parse.ts","../../../node_modules/.pnpm/pg-protocol@1.6.1_patch_hash=v2nehwgo6jts4ikdebw4p4352i/node_modules/pg-protocol/src/messages.ts","../src/types.ts","../src/polyfills/buffer.ts","../src/extensionUtils.ts","../../../node_modules/.pnpm/pg-protocol@1.6.1_patch_hash=v2nehwgo6jts4ikdebw4p4352i/node_modules/pg-protocol/src/index.ts","../../../node_modules/.pnpm/pg-protocol@1.6.1_patch_hash=v2nehwgo6jts4ikdebw4p4352i/node_modules/pg-protocol/src/serializer.ts","../../../node_modules/.pnpm/pg-protocol@1.6.1_patch_hash=v2nehwgo6jts4ikdebw4p4352i/node_modules/pg-protocol/src/buffer-writer.ts","../../../node_modules/.pnpm/pg-protocol@1.6.1_patch_hash=v2nehwgo6jts4ikdebw4p4352i/node_modules/pg-protocol/src/parser.ts","../../../node_modules/.pnpm/pg-protocol@1.6.1_patch_hash=v2nehwgo6jts4ikdebw4p4352i/node_modules/pg-protocol/src/buffer-reader.ts","../src/interface.ts"],"sourcesContent":["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","export * from './pglite.js'\nexport * from './interface.js'\nexport * as types from './types.js'\nexport * as parse from './parse.js'\nexport * as messages from 'pg-protocol/src/messages.js'\nexport * as protocol from 'pg-protocol/src/index.js'\nexport { MemoryFS } from './fs/memoryfs.js'\nexport { IdbFs } from './fs/idbfs.js'\nexport { Mutex } from 'async-mutex'\nexport { uuid, formatQuery } from './utils.js'\n","import { Mutex } from 'async-mutex'\nimport PostgresModFactory, { type PostgresMod } from './postgresMod.js'\nimport { type Filesystem, parseDataDir, loadFs } from './fs/index.js'\nimport { makeLocateFile } from './utils.js'\nimport { parseResults } from './parse.js'\nimport { serializeType } from './types.js'\nimport type {\n  DebugLevel,\n  PGliteOptions,\n  PGliteInterface,\n  Results,\n  Transaction,\n  QueryOptions,\n  ExecProtocolOptions,\n  PGliteInterfaceExtensions,\n  Extensions,\n} from './interface.js'\nimport { loadExtensionBundle, loadExtensions } from './extensionUtils.js'\nimport { loadTar, DumpTarCompressionOptions } from './fs/tarUtils.js'\nimport { Buffer } from './polyfills/buffer.js'\n\nimport { PGDATA, WASM_PREFIX } from './fs/index.js'\n\n// Importing the source as the built version is not ESM compatible\nimport { serialize } from 'pg-protocol/src/index.js'\nimport { Parser } from 'pg-protocol/src/parser.js'\nimport {\n  BackendMessage,\n  DatabaseError,\n  NoticeMessage,\n  CommandCompleteMessage,\n  NotificationResponseMessage,\n} from 'pg-protocol/src/messages.js'\n\nexport class PGlite implements PGliteInterface, AsyncDisposable {\n  fs?: Filesystem\n  protected mod?: PostgresMod\n\n  readonly dataDir?: string\n\n  #ready = false\n  #closing = false\n  #closed = false\n  #inTransaction = false\n  #relaxedDurability = false\n\n  readonly waitReady: Promise<void>\n\n  #queryMutex = new Mutex()\n  #transactionMutex = new Mutex()\n  #fsSyncMutex = new Mutex()\n  #fsSyncScheduled = false\n\n  readonly debug: DebugLevel = 0\n\n  #extensions: Extensions\n  #extensionsClose: Array<() => Promise<void>> = []\n\n  #parser = new Parser()\n\n  // These are the current ArrayBuffer that is being read or written to\n  // during a query, such as COPY FROM or COPY TO.\n  #queryReadBuffer?: ArrayBuffer\n  #queryWriteChunks?: Uint8Array[]\n\n  #notifyListeners = new Map<string, Set<(payload: string) => void>>()\n  #globalNotifyListeners = new Set<(channel: string, payload: string) => void>()\n\n  /**\n   * Create a new PGlite instance\n   * @param dataDir The directory to store the database files\n   *                Prefix with idb:// to use indexeddb filesystem in the browser\n   *                Use memory:// to use in-memory filesystem\n   * @param options Optional options\n   */\n  constructor(dataDir?: string, options?: PGliteOptions)\n\n  /**\n   * Create a new PGlite instance\n   * @param options PGlite options including the data directory\n   */\n  constructor(options?: PGliteOptions)\n\n  constructor(\n    dataDirOrPGliteOptions: string | PGliteOptions = {},\n    options: PGliteOptions = {},\n  ) {\n    if (typeof dataDirOrPGliteOptions === 'string') {\n      options = {\n        dataDir: dataDirOrPGliteOptions,\n        ...options,\n      }\n    } else {\n      options = dataDirOrPGliteOptions\n    }\n    this.dataDir = options.dataDir\n\n    // Enable debug logging if requested\n    if (options?.debug !== undefined) {\n      this.debug = options.debug\n    }\n\n    // Enable relaxed durability if requested\n    if (options?.relaxedDurability !== undefined) {\n      this.#relaxedDurability = options.relaxedDurability\n    }\n\n    // Save the extensions for later use\n    this.#extensions = options.extensions ?? {}\n\n    // Initialize the database, and store the promise so we can wait for it to be ready\n    this.waitReady = this.#init(options ?? {})\n  }\n\n  /**\n   * Create a new PGlite instance with extensions on the Typescript interface\n   * (The main constructor does enable extensions, however due to the limitations\n   * of Typescript, the extensions are not available on the instance interface)\n   * @param dataDir The directory to store the database files\n   *                Prefix with idb:// to use indexeddb filesystem in the browser\n   *                Use memory:// to use in-memory filesystem\n   * @param options Optional options\n   * @returns A promise that resolves to the PGlite instance when it's ready.\n   */\n  static async create<O extends PGliteOptions>(\n    options?: O,\n  ): Promise<PGlite & PGliteInterfaceExtensions<O['extensions']>> {\n    const pg = new PGlite(options)\n    await pg.waitReady\n    return pg as any\n  }\n\n  /**\n   * Initialize the database\n   * @returns A promise that resolves when the database is ready\n   */\n  async #init(options: PGliteOptions) {\n    if (options.fs) {\n      this.fs = options.fs\n    } else {\n      const { dataDir, fsType } = parseDataDir(options.dataDir)\n      this.fs = await loadFs(dataDir, fsType)\n    }\n\n    const extensionBundlePromises: Record<string, Promise<Blob | null>> = {}\n    const extensionInitFns: Array<() => Promise<void>> = []\n\n    const args = [\n      `PGDATA=${PGDATA}`,\n      `PREFIX=${WASM_PREFIX}`,\n      `PGUSER=${options.username ?? 'postgres'}`,\n      `PGDATABASE=${options.database ?? 'template1'}`,\n      'MODE=REACT',\n      'REPL=N',\n      // \"-F\", // Disable fsync (TODO: Only for in-memory mode?)\n      ...(this.debug ? ['-d', this.debug.toString()] : []),\n    ]\n\n    let emscriptenOpts: Partial<PostgresMod> = {\n      WASM_PREFIX,\n      arguments: args,\n      INITIAL_MEMORY: options.initialMemory,\n      noExitRuntime: true,\n      ...(this.debug > 0\n        ? { print: console.info, printErr: console.error }\n        : { print: () => {}, printErr: () => {} }),\n      locateFile: await makeLocateFile(),\n      preRun: [\n        (mod: any) => {\n          // Register /dev/blob device\n          // This is used to read and write blobs when used in COPY TO/FROM\n          // e.g. COPY mytable TO '/dev/blob' WITH (FORMAT binary)\n          // The data is returned by the query as a `blob` property in the results\n          const devId = mod.FS.makedev(64, 0)\n          const devOpt = {\n            open: (_stream: any) => {},\n            close: (_stream: any) => {},\n            read: (\n              _stream: any,\n              buffer: Uint8Array,\n              offset: number,\n              length: number,\n              position: number,\n            ) => {\n              const buf = this.#queryReadBuffer\n              if (!buf) {\n                throw new Error(\n                  'No /dev/blob File or Blob provided to read from',\n                )\n              }\n              const contents = new Uint8Array(buf)\n              if (position >= contents.length) return 0\n              const size = Math.min(contents.length - position, length)\n              for (let i = 0; i < size; i++) {\n                buffer[offset + i] = contents[position + i]\n              }\n              return size\n            },\n            write: (\n              _stream: any,\n              buffer: Uint8Array,\n              offset: number,\n              length: number,\n              _position: number,\n            ) => {\n              this.#queryWriteChunks ??= []\n              this.#queryWriteChunks.push(buffer.slice(offset, offset + length))\n              return length\n            },\n            llseek: (stream: any, offset: number, whence: number) => {\n              const buf = this.#queryReadBuffer\n              if (!buf) {\n                throw new Error('No /dev/blob File or Blob provided to llseek')\n              }\n              let position = offset\n              if (whence === 1) {\n                position += stream.position\n              } else if (whence === 2) {\n                position = new Uint8Array(buf).length\n              }\n              if (position < 0) {\n                throw new mod.FS.ErrnoError(28)\n              }\n              return position\n            },\n          }\n          mod.FS.registerDevice(devId, devOpt)\n          mod.FS.mkdev('/dev/blob', devId)\n        },\n      ],\n    }\n\n    emscriptenOpts = await this.fs!.emscriptenOpts(emscriptenOpts)\n\n    // # Setup extensions\n    // This is the first step of loading PGlite extensions\n    // We loop through each extension and call the setup function\n    // This amends the emscriptenOpts and can return:\n    // - emscriptenOpts: The updated emscripten options\n    // - namespaceObj: The namespace object to attach to the PGlite instance\n    // - init: A function to initialize the extension/plugin after the database is ready\n    // - close: A function to close/tidy-up the extension/plugin when the database is closed\n    for (const [extName, ext] of Object.entries(this.#extensions)) {\n      if (ext instanceof URL) {\n        // Extension with only a URL to a bundle\n        extensionBundlePromises[extName] = loadExtensionBundle(ext)\n      } else {\n        // Extension with JS setup function\n        const extRet = await ext.setup(this, emscriptenOpts)\n        if (extRet.emscriptenOpts) {\n          emscriptenOpts = extRet.emscriptenOpts\n        }\n        if (extRet.namespaceObj) {\n          const instance = this as any\n          instance[extName] = extRet.namespaceObj\n        }\n        if (extRet.bundlePath) {\n          extensionBundlePromises[extName] = loadExtensionBundle(\n            extRet.bundlePath,\n          ) // Don't await here, this is parallel\n        }\n        if (extRet.init) {\n          extensionInitFns.push(extRet.init)\n        }\n        if (extRet.close) {\n          this.#extensionsClose.push(extRet.close)\n        }\n      }\n    }\n    emscriptenOpts['pg_extensions'] = extensionBundlePromises\n\n    // Load the database engine\n    this.mod = await PostgresModFactory(emscriptenOpts)\n\n    // Sync the filesystem from any previous store\n    await this.fs!.initialSyncFs(this.mod.FS)\n\n    // If the user has provided a tarball to load the database from, do that now.\n    // We do this after the initial sync so that we can throw if the database\n    // already exists.\n    if (options.loadDataDir) {\n      if (this.mod.FS.analyzePath(PGDATA + '/PG_VERSION').exists) {\n        throw new Error('Database already exists, cannot load from tarball')\n      }\n      this.#log('pglite: loading data from tarball')\n      await loadTar(this.mod.FS, options.loadDataDir)\n    }\n\n    // Check and log if the database exists\n    if (this.mod.FS.analyzePath(PGDATA + '/PG_VERSION').exists) {\n      this.#log('pglite: found DB, resuming')\n    } else {\n      this.#log('pglite: no db')\n    }\n\n    // Start compiling dynamic extensions present in FS.\n    await loadExtensions(this.mod, (...args) => this.#log(...args))\n\n    // Initialize the database\n    const idb = this.mod._pg_initdb()\n\n    if (!idb) {\n      // This would be a sab worker crash before pg_initdb can be called\n      throw new Error('INITDB failed to return value')\n    }\n\n    // initdb states:\n    // - populating pgdata\n    // - reconnect a previous db\n    // - found valid db+user\n    // currently unhandled:\n    // - db does not exist\n    // - user is invalid for db\n\n    if (idb & 0b0001) {\n      // this would be a wasm crash inside pg_initdb from a sab worker.\n      throw new Error('INITDB failed')\n    } else if (idb & 0b0010) {\n      // initdb was called to init PGDATA if required\n      const pguser = options.username ?? 'postgres'\n      const pgdatabase = options.database ?? 'template1'\n      if (idb & 0b0100) {\n        // initdb has found a previous database\n        if (idb & (0b0100 | 0b1000)) {\n          // initdb found db+user, and we switched to that user\n        } else {\n          // TODO: invalid user for db?\n          throw new Error('Invalid db/user combination')\n        }\n      } else {\n        // initdb has created a new database for us, we can only continue if we are\n        // in template1 and the user is postgres\n        if (pgdatabase !== 'template1' && pguser !== 'postgres') {\n          // throw new Error(`Invalid database ${pgdatabase} requested`);\n          throw new Error(\n            'INITDB created a new datadir, but an alternative db/user was requested',\n          )\n        }\n      }\n    }\n\n    // Sync any changes back to the persisted store (if there is one)\n    // TODO: only sync here if initdb did init db.\n    await this.#syncToFs()\n\n    // Set the search path to public for this connection\n    await this.#runExec('SET search_path TO public;')\n\n    this.#ready = true\n\n    // Init extensions\n    for (const initFn of extensionInitFns) {\n      await initFn()\n    }\n  }\n\n  /**\n   * The Postgres Emscripten Module\n   */\n  get Module() {\n    return this.mod!\n  }\n\n  /**\n   * The ready state of the database\n   */\n  get ready() {\n    return this.#ready && !this.#closing && !this.#closed\n  }\n\n  /**\n   * The closed state of the database\n   */\n  get closed() {\n    return this.#closed\n  }\n\n  /**\n   * Close the database\n   * @returns A promise that resolves when the database is closed\n   */\n  async close() {\n    await this.#checkReady()\n    this.#closing = true\n\n    // Close all extensions\n    for (const closeFn of this.#extensionsClose) {\n      await closeFn()\n    }\n\n    // Close the database\n    try {\n      await this.execProtocol(serialize.end())\n    } catch (e) {\n      const err = e as { name: string; status: number }\n      if (err.name === 'ExitStatus' && err.status === 0) {\n        // Database closed successfully\n        // An earlier build of PGlite would throw an error here when closing\n        // leaving this here for now. I believe it was a bug in Emscripten.\n      } else {\n        throw e\n      }\n    }\n\n    // Close the filesystem\n    await this.fs!.close(this.mod!.FS)\n\n    this.#closed = true\n    this.#closing = false\n  }\n\n  /**\n   * Close the database when the object exits scope\n   * Stage 3 ECMAScript Explicit Resource Management\n   * https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-2.html#using-declarations-and-explicit-resource-management\n   */\n  async [Symbol.asyncDispose]() {\n    await this.close()\n  }\n\n  /**\n   * Execute a single SQL statement\n   * This uses the \"Extended Query\" postgres wire protocol message.\n   * @param query The query to execute\n   * @param params Optional parameters for the query\n   * @returns The result of the query\n   */\n  async query<T>(\n    query: string,\n    params?: any[],\n    options?: QueryOptions,\n  ): Promise<Results<T>> {\n    await this.#checkReady()\n    // We wrap the public query method in the transaction mutex to ensure that\n    // only one query can be executed at a time and not concurrently with a\n    // transaction.\n    return await this.#transactionMutex.runExclusive(async () => {\n      return await this.#runQuery<T>(query, params, options)\n    })\n  }\n\n  /**\n   * Execute a SQL query, this can have multiple statements.\n   * This uses the \"Simple Query\" postgres wire protocol message.\n   * @param query The query to execute\n   * @returns The result of the query\n   */\n  async exec(query: string, options?: QueryOptions): Promise<Array<Results>> {\n    await this.#checkReady()\n    // We wrap the public exec method in the transaction mutex to ensure that\n    // only one query can be executed at a time and not concurrently with a\n    // transaction.\n    return await this.#transactionMutex.runExclusive(async () => {\n      return await this.#runExec(query, options)\n    })\n  }\n\n  /**\n   * Internal method to execute a query\n   * Not protected by the transaction mutex, so it can be used inside a transaction\n   * @param query The query to execute\n   * @param params Optional parameters for the query\n   * @returns The result of the query\n   */\n  async #runQuery<T>(\n    query: string,\n    params?: any[],\n    options?: QueryOptions,\n  ): Promise<Results<T>> {\n    return await this.#queryMutex.runExclusive(async () => {\n      // We need to parse, bind and execute a query with parameters\n      this.#log('runQuery', query, params, options)\n      await this.#handleBlob(options?.blob)\n      const parsedParams =\n        params?.map((p) => serializeType(p, options?.setAllTypes)) || []\n      let results\n      try {\n        results = [\n          ...(await this.#execProtocolNoSync(\n            serialize.parse({\n              text: query,\n              types: parsedParams.map(([, type]) => type),\n            }),\n            options,\n          )),\n          ...(await this.#execProtocolNoSync(\n            serialize.bind({\n              values: parsedParams.map(([val]) => val),\n            }),\n            options,\n          )),\n          ...(await this.#execProtocolNoSync(\n            serialize.describe({ type: 'P' }),\n            options,\n          )),\n          ...(await this.#execProtocolNoSync(serialize.execute({}), options)),\n        ]\n      } finally {\n        await this.#execProtocolNoSync(serialize.sync(), options)\n      }\n      this.#cleanupBlob()\n      if (!this.#inTransaction) {\n        await this.#syncToFs()\n      }\n      let blob: Blob | undefined\n      if (this.#queryWriteChunks) {\n        blob = new Blob(this.#queryWriteChunks)\n        this.#queryWriteChunks = undefined\n      }\n      return parseResults(\n        results.map(([msg]) => msg),\n        options,\n        blob,\n      )[0] as Results<T>\n    })\n  }\n\n  /**\n   * Internal method to execute a query\n   * Not protected by the transaction mutex, so it can be used inside a transaction\n   * @param query The query to execute\n   * @param params Optional parameters for the query\n   * @returns The result of the query\n   */\n  async #runExec(\n    query: string,\n    options?: QueryOptions,\n  ): Promise<Array<Results>> {\n    return await this.#queryMutex.runExclusive(async () => {\n      // No params so we can just send the query\n      this.#log('runExec', query, options)\n      await this.#handleBlob(options?.blob)\n      let results\n      try {\n        results = await this.#execProtocolNoSync(\n          serialize.query(query),\n          options,\n        )\n      } finally {\n        await this.#execProtocolNoSync(serialize.sync(), options)\n      }\n      this.#cleanupBlob()\n      if (!this.#inTransaction) {\n        await this.#syncToFs()\n      }\n      let blob: Blob | undefined\n      if (this.#queryWriteChunks) {\n        blob = new Blob(this.#queryWriteChunks)\n        this.#queryWriteChunks = undefined\n      }\n      return parseResults(\n        results.map(([msg]) => msg),\n        options,\n        blob,\n      ) as Array<Results>\n    })\n  }\n\n  /**\n   * Execute a transaction\n   * @param callback A callback function that takes a transaction object\n   * @returns The result of the transaction\n   */\n  async transaction<T>(\n    callback: (tx: Transaction) => Promise<T>,\n  ): Promise<T | undefined> {\n    await this.#checkReady()\n    return await this.#transactionMutex.runExclusive(async () => {\n      await this.#runExec('BEGIN')\n\n      // Once a transaction is closed, we throw an error if it's used again\n      let closed = false\n      const checkClosed = () => {\n        if (closed) {\n          throw new Error('Transaction is closed')\n        }\n      }\n\n      try {\n        const tx: Transaction = {\n          query: async (\n            query: string,\n            params?: any[],\n            options?: QueryOptions,\n          ) => {\n            checkClosed()\n            return await this.#runQuery(query, params, options)\n          },\n          exec: async (query: string, options?: QueryOptions) => {\n            checkClosed()\n            return await this.#runExec(query, options)\n          },\n          rollback: async () => {\n            checkClosed()\n            // Rollback and set the closed flag to prevent further use of this\n            // transaction\n            await this.#runExec('ROLLBACK')\n            closed = true\n          },\n          get closed() {\n            return closed\n          },\n        }\n        const result = await callback(tx)\n        if (!closed) {\n          closed = true\n          await this.#runExec('COMMIT')\n        }\n        return result\n      } catch (e) {\n        if (!closed) {\n          await this.#runExec('ROLLBACK')\n        }\n        throw e\n      }\n    })\n  }\n\n  /**\n   * Handle a file attached to the current query\n   * @param file The file to handle\n   */\n  async #handleBlob(blob?: File | Blob) {\n    this.#queryReadBuffer = blob ? await blob.arrayBuffer() : undefined\n  }\n\n  /**\n   * Cleanup the current file\n   */\n  #cleanupBlob() {\n    this.#queryReadBuffer = undefined\n  }\n\n  /**\n   * Wait for the database to be ready\n   */\n  async #checkReady() {\n    if (this.#closing) {\n      throw new Error('PGlite is closing')\n    }\n    if (this.#closed) {\n      throw new Error('PGlite is closed')\n    }\n    if (!this.#ready) {\n      // Starting the database can take a while and it might not be ready yet\n      // We'll wait for it to be ready before continuing\n      await this.waitReady\n    }\n  }\n\n  /**\n   * Execute a postgres wire protocol message directly without wrapping the response.\n   * Only use if `execProtocol()` doesn't suite your needs.\n   *\n   * **Warning:** This bypasses PGlite's protocol wrappers that manage error/notice messages,\n   * transactions, and notification listeners. Only use if you need to bypass these wrappers and\n   * don't intend to use the above features.\n   *\n   * @param message The postgres wire protocol message to execute\n   * @returns The direct message data response produced by Postgres\n   */\n  async execProtocolRaw(\n    message: Uint8Array,\n    { syncToFs = true }: ExecProtocolOptions = {},\n  ) {\n    const msg_len = message.length\n    const mod = this.mod!\n\n    // >0 set buffer content type to wire protocol\n    // set buffer size so answer will be at size+0x2 pointer addr\n    mod._interactive_write(msg_len)\n\n    // copy whole buffer at addr 0x1\n    mod.HEAPU8.set(message, 1)\n\n    // execute the message\n    mod._interactive_one()\n\n    // Read responses from the buffer\n    const msg_start = msg_len + 2\n    const msg_end = msg_start + mod._interactive_read()\n    const data = mod.HEAPU8.subarray(msg_start, msg_end)\n\n    if (syncToFs) {\n      await this.#syncToFs()\n    }\n\n    return data\n  }\n\n  /**\n   * Execute a postgres wire protocol message\n   * @param message The postgres wire protocol message to execute\n   * @returns The result of the query\n   */\n  async execProtocol(\n    message: Uint8Array,\n    { syncToFs = true, onNotice }: ExecProtocolOptions = {},\n  ): Promise<Array<[BackendMessage, Uint8Array]>> {\n    const data = await this.execProtocolRaw(message, { syncToFs })\n    const results: Array<[BackendMessage, Uint8Array]> = []\n\n    this.#parser.parse(Buffer.from(data), (msg) => {\n      if (msg instanceof DatabaseError) {\n        this.#parser = new Parser() // Reset the parser\n        throw msg\n        // TODO: Do we want to wrap the error in a custom error?\n      } else if (msg instanceof NoticeMessage) {\n        if (this.debug > 0) {\n          // Notice messages are warnings, we should log them\n          console.warn(msg)\n        }\n        if (onNotice) {\n          onNotice(msg)\n        }\n      } else if (msg instanceof CommandCompleteMessage) {\n        // Keep track of the transaction state\n        switch (msg.text) {\n          case 'BEGIN':\n            this.#inTransaction = true\n            break\n          case 'COMMIT':\n          case 'ROLLBACK':\n            this.#inTransaction = false\n            break\n        }\n      } else if (msg instanceof NotificationResponseMessage) {\n        // We've received a notification, call the listeners\n        const listeners = this.#notifyListeners.get(msg.channel)\n        if (listeners) {\n          listeners.forEach((cb) => {\n            // We use queueMicrotask so that the callback is called after any\n            // synchronous code has finished running.\n            queueMicrotask(() => cb(msg.payload))\n          })\n        }\n        this.#globalNotifyListeners.forEach((cb) => {\n          queueMicrotask(() => cb(msg.channel, msg.payload))\n        })\n      }\n      results.push([msg, data])\n    })\n\n    return results\n  }\n\n  async #execProtocolNoSync(\n    message: Uint8Array,\n    options: ExecProtocolOptions = {},\n  ): Promise<Array<[BackendMessage, Uint8Array]>> {\n    return await this.execProtocol(message, { ...options, syncToFs: false })\n  }\n\n  /**\n   * Perform any sync operations implemented by the filesystem, this is\n   * run after every query to ensure that the filesystem is synced.\n   */\n  async #syncToFs() {\n    if (this.#fsSyncScheduled) {\n      return\n    }\n    this.#fsSyncScheduled = true\n\n    const doSync = async () => {\n      await this.#fsSyncMutex.runExclusive(async () => {\n        this.#fsSyncScheduled = false\n        await this.fs!.syncToFs(this.mod!.FS, this.#relaxedDurability)\n      })\n    }\n\n    if (this.#relaxedDurability) {\n      doSync()\n    } else {\n      await doSync()\n    }\n  }\n\n  /**\n   * Internal log function\n   */\n  #log(...args: any[]) {\n    if (this.debug > 0) {\n      console.log(...args)\n    }\n  }\n\n  /**\n   * Listen for a notification\n   * @param channel The channel to listen on\n   * @param callback The callback to call when a notification is received\n   */\n  async listen(channel: string, callback: (payload: string) => void) {\n    if (!this.#notifyListeners.has(channel)) {\n      this.#notifyListeners.set(channel, new Set())\n    }\n    this.#notifyListeners.get(channel)!.add(callback)\n    await this.exec(`LISTEN ${channel}`)\n    return async () => {\n      await this.unlisten(channel, callback)\n    }\n  }\n\n  /**\n   * Stop listening for a notification\n   * @param channel The channel to stop listening on\n   * @param callback The callback to remove\n   */\n  async unlisten(channel: string, callback?: (payload: string) => void) {\n    if (callback) {\n      this.#notifyListeners.get(channel)?.delete(callback)\n      if (this.#notifyListeners.get(channel)?.size === 0) {\n        await this.exec(`UNLISTEN ${channel}`)\n        this.#notifyListeners.delete(channel)\n      }\n    } else {\n      await this.exec(`UNLISTEN ${channel}`)\n      this.#notifyListeners.delete(channel)\n    }\n  }\n\n  /**\n   * Listen to notifications\n   * @param callback The callback to call when a notification is received\n   */\n  onNotification(\n    callback: (channel: string, payload: string) => void,\n  ): () => void {\n    this.#globalNotifyListeners.add(callback)\n    return () => {\n      this.#globalNotifyListeners.delete(callback)\n    }\n  }\n\n  /**\n   * Stop listening to notifications\n   * @param callback The callback to remove\n   */\n  offNotification(callback: (channel: string, payload: string) => void) {\n    this.#globalNotifyListeners.delete(callback)\n  }\n\n  /**\n   * Dump the PGDATA dir from the filesystem to a gziped tarball.\n   * @param compression The compression options to use - 'gzip', 'auto', 'none'\n   * @returns The tarball as a File object where available, and fallback to a Blob\n   */\n  async dumpDataDir(\n    compression?: DumpTarCompressionOptions,\n  ): Promise<File | Blob> {\n    const dbname = this.dataDir?.split('/').pop() ?? 'pgdata'\n    return this.fs!.dumpTar(this.mod!.FS, dbname, compression)\n  }\n}\n","const E_TIMEOUT = new Error('timeout while waiting for mutex to become available');\nconst E_ALREADY_LOCKED = new Error('mutex already locked');\nconst E_CANCELED = new Error('request for lock canceled');\n\nvar __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Semaphore {\n    constructor(_value, _cancelError = E_CANCELED) {\n        this._value = _value;\n        this._cancelError = _cancelError;\n        this._weightedQueues = [];\n        this._weightedWaiters = [];\n    }\n    acquire(weight = 1) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        return new Promise((resolve, reject) => {\n            if (!this._weightedQueues[weight - 1])\n                this._weightedQueues[weight - 1] = [];\n            this._weightedQueues[weight - 1].push({ resolve, reject });\n            this._dispatch();\n        });\n    }\n    runExclusive(callback, weight = 1) {\n        return __awaiter$2(this, void 0, void 0, function* () {\n            const [value, release] = yield this.acquire(weight);\n            try {\n                return yield callback(value);\n            }\n            finally {\n                release();\n            }\n        });\n    }\n    waitForUnlock(weight = 1) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        return new Promise((resolve) => {\n            if (!this._weightedWaiters[weight - 1])\n                this._weightedWaiters[weight - 1] = [];\n            this._weightedWaiters[weight - 1].push(resolve);\n            this._dispatch();\n        });\n    }\n    isLocked() {\n        return this._value <= 0;\n    }\n    getValue() {\n        return this._value;\n    }\n    setValue(value) {\n        this._value = value;\n        this._dispatch();\n    }\n    release(weight = 1) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        this._value += weight;\n        this._dispatch();\n    }\n    cancel() {\n        this._weightedQueues.forEach((queue) => queue.forEach((entry) => entry.reject(this._cancelError)));\n        this._weightedQueues = [];\n    }\n    _dispatch() {\n        var _a;\n        for (let weight = this._value; weight > 0; weight--) {\n            const queueEntry = (_a = this._weightedQueues[weight - 1]) === null || _a === void 0 ? void 0 : _a.shift();\n            if (!queueEntry)\n                continue;\n            const previousValue = this._value;\n            const previousWeight = weight;\n            this._value -= weight;\n            weight = this._value + 1;\n            queueEntry.resolve([previousValue, this._newReleaser(previousWeight)]);\n        }\n        this._drainUnlockWaiters();\n    }\n    _newReleaser(weight) {\n        let called = false;\n        return () => {\n            if (called)\n                return;\n            called = true;\n            this.release(weight);\n        };\n    }\n    _drainUnlockWaiters() {\n        for (let weight = this._value; weight > 0; weight--) {\n            if (!this._weightedWaiters[weight - 1])\n                continue;\n            this._weightedWaiters[weight - 1].forEach((waiter) => waiter());\n            this._weightedWaiters[weight - 1] = [];\n        }\n    }\n}\n\nvar __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Mutex {\n    constructor(cancelError) {\n        this._semaphore = new Semaphore(1, cancelError);\n    }\n    acquire() {\n        return __awaiter$1(this, void 0, void 0, function* () {\n            const [, releaser] = yield this._semaphore.acquire();\n            return releaser;\n        });\n    }\n    runExclusive(callback) {\n        return this._semaphore.runExclusive(() => callback());\n    }\n    isLocked() {\n        return this._semaphore.isLocked();\n    }\n    waitForUnlock() {\n        return this._semaphore.waitForUnlock();\n    }\n    release() {\n        if (this._semaphore.isLocked())\n            this._semaphore.release();\n    }\n    cancel() {\n        return this._semaphore.cancel();\n    }\n}\n\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nfunction withTimeout(sync, timeout, timeoutError = E_TIMEOUT) {\n    return {\n        acquire: (weight) => {\n            if (weight !== undefined && weight <= 0) {\n                throw new Error(`invalid weight ${weight}: must be positive`);\n            }\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                let isTimeout = false;\n                const handle = setTimeout(() => {\n                    isTimeout = true;\n                    reject(timeoutError);\n                }, timeout);\n                try {\n                    const ticket = yield sync.acquire(weight);\n                    if (isTimeout) {\n                        const release = Array.isArray(ticket) ? ticket[1] : ticket;\n                        release();\n                    }\n                    else {\n                        clearTimeout(handle);\n                        resolve(ticket);\n                    }\n                }\n                catch (e) {\n                    if (!isTimeout) {\n                        clearTimeout(handle);\n                        reject(e);\n                    }\n                }\n            }));\n        },\n        runExclusive(callback, weight) {\n            return __awaiter(this, void 0, void 0, function* () {\n                let release = () => undefined;\n                try {\n                    const ticket = yield this.acquire(weight);\n                    if (Array.isArray(ticket)) {\n                        release = ticket[1];\n                        return yield callback(ticket[0]);\n                    }\n                    else {\n                        release = ticket;\n                        return yield callback();\n                    }\n                }\n                finally {\n                    release();\n                }\n            });\n        },\n        release(weight) {\n            sync.release(weight);\n        },\n        cancel() {\n            return sync.cancel();\n        },\n        waitForUnlock: (weight) => {\n            if (weight !== undefined && weight <= 0) {\n                throw new Error(`invalid weight ${weight}: must be positive`);\n            }\n            return new Promise((resolve, reject) => {\n                const handle = setTimeout(() => reject(timeoutError), timeout);\n                sync.waitForUnlock(weight).then(() => {\n                    clearTimeout(handle);\n                    resolve();\n                });\n            });\n        },\n        isLocked: () => sync.isLocked(),\n        getValue: () => sync.getValue(),\n        setValue: (value) => sync.setValue(value),\n    };\n}\n\n// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types\nfunction tryAcquire(sync, alreadyAcquiredError = E_ALREADY_LOCKED) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return withTimeout(sync, 0, alreadyAcquiredError);\n}\n\nexport { E_ALREADY_LOCKED, E_CANCELED, E_TIMEOUT, Mutex, Semaphore, tryAcquire, withTimeout };\n","import PostgresModFactory from '../release/postgres.js'\n\ntype IDBFS = Emscripten.FileSystemType & {\n  quit: () => void\n  dbs: Record<string, IDBDatabase>\n}\n\nexport type FS = typeof FS & {\n  filesystems: {\n    MEMFS: Emscripten.FileSystemType\n    NODEFS: Emscripten.FileSystemType\n    IDBFS: IDBFS\n  }\n  quit: () => void\n}\n\nexport interface PostgresMod\n  extends Omit<EmscriptenModule, 'preInit' | 'preRun' | 'postRun'> {\n  preInit: Array<{ (mod: PostgresMod): void }>\n  preRun: Array<{ (mod: PostgresMod): void }>\n  postRun: Array<{ (mod: PostgresMod): void }>\n  FS: FS\n  WASM_PREFIX: string\n  INITIAL_MEMORY: number\n  pg_extensions: Record<string, Promise<Blob | null>>\n  _pg_initdb: () => number\n  _interactive_write: (msgLength: number) => void\n  _interactive_one: () => void\n  _interactive_read: () => number\n}\n\ntype PostgresFactory<T extends PostgresMod = PostgresMod> = (\n  moduleOverrides?: Partial<T>,\n) => Promise<T>\n\nexport default PostgresModFactory as PostgresFactory<PostgresMod>\n","import {\n  BackendMessage,\n  RowDescriptionMessage,\n  DataRowMessage,\n  CommandCompleteMessage,\n} from 'pg-protocol/src/messages.js'\nimport type { Results, QueryOptions } from './interface.js'\nimport { parseType } from './types.js'\n\n/**\n * This function is used to parse the results of either a simple or extended query.\n * https://www.postgresql.org/docs/current/protocol-flow.html#PROTOCOL-FLOW-SIMPLE-QUERY\n */\nexport function parseResults(\n  messages: Array<BackendMessage>,\n  options?: QueryOptions,\n  blob?: Blob,\n): Array<Results> {\n  const resultSets: Results[] = []\n  let currentResultSet: Results = { rows: [], fields: [] }\n  let affectedRows = 0\n\n  const filteredMessages = messages.filter(\n    (msg) =>\n      msg instanceof RowDescriptionMessage ||\n      msg instanceof DataRowMessage ||\n      msg instanceof CommandCompleteMessage,\n  )\n\n  filteredMessages.forEach((msg, index) => {\n    if (msg instanceof RowDescriptionMessage) {\n      currentResultSet.fields = msg.fields.map((field) => ({\n        name: field.name,\n        dataTypeID: field.dataTypeID,\n      }))\n    } else if (msg instanceof DataRowMessage && currentResultSet) {\n      if (options?.rowMode === 'array') {\n        currentResultSet.rows.push(\n          msg.fields.map((field, i) =>\n            parseType(\n              field,\n              currentResultSet!.fields[i].dataTypeID,\n              options?.parsers,\n            ),\n          ),\n        )\n      } else {\n        // rowMode === \"object\"\n        currentResultSet.rows.push(\n          Object.fromEntries(\n            msg.fields.map((field, i) => [\n              currentResultSet!.fields[i].name,\n              parseType(\n                field,\n                currentResultSet!.fields[i].dataTypeID,\n                options?.parsers,\n              ),\n            ]),\n          ),\n        )\n      }\n    } else if (msg instanceof CommandCompleteMessage) {\n      affectedRows += retrieveRowCount(msg)\n\n      if (index === filteredMessages.length - 1)\n        resultSets.push({\n          ...currentResultSet,\n          affectedRows,\n          ...(blob ? { blob } : {}),\n        })\n      else resultSets.push(currentResultSet)\n\n      currentResultSet = { rows: [], fields: [] }\n    }\n  })\n\n  if (resultSets.length === 0) {\n    resultSets.push({\n      rows: [],\n      fields: [],\n    })\n  }\n\n  return resultSets\n}\n\nfunction retrieveRowCount(msg: CommandCompleteMessage): number {\n  const parts = msg.text.split(' ')\n  switch (parts[0]) {\n    case 'INSERT':\n      return parseInt(parts[2], 10)\n    case 'UPDATE':\n    case 'DELETE':\n      return parseInt(parts[1], 10)\n    default:\n      return 0\n  }\n}\n","import { Buffer } from 'node:buffer'\n\nexport type Mode = 'text' | 'binary'\n\nexport type MessageName =\n  | 'parseComplete'\n  | 'bindComplete'\n  | 'closeComplete'\n  | 'noData'\n  | 'portalSuspended'\n  | 'replicationStart'\n  | 'emptyQuery'\n  | 'copyDone'\n  | 'copyData'\n  | 'rowDescription'\n  | 'parameterDescription'\n  | 'parameterStatus'\n  | 'backendKeyData'\n  | 'notification'\n  | 'readyForQuery'\n  | 'commandComplete'\n  | 'dataRow'\n  | 'copyInResponse'\n  | 'copyOutResponse'\n  | 'authenticationOk'\n  | 'authenticationMD5Password'\n  | 'authenticationCleartextPassword'\n  | 'authenticationSASL'\n  | 'authenticationSASLContinue'\n  | 'authenticationSASLFinal'\n  | 'error'\n  | 'notice'\n\nexport interface BackendMessage {\n  name: MessageName\n  length: number\n}\n\nexport const parseComplete: BackendMessage = {\n  name: 'parseComplete',\n  length: 5,\n}\n\nexport const bindComplete: BackendMessage = {\n  name: 'bindComplete',\n  length: 5,\n}\n\nexport const closeComplete: BackendMessage = {\n  name: 'closeComplete',\n  length: 5,\n}\n\nexport const noData: BackendMessage = {\n  name: 'noData',\n  length: 5,\n}\n\nexport const portalSuspended: BackendMessage = {\n  name: 'portalSuspended',\n  length: 5,\n}\n\nexport const replicationStart: BackendMessage = {\n  name: 'replicationStart',\n  length: 4,\n}\n\nexport const emptyQuery: BackendMessage = {\n  name: 'emptyQuery',\n  length: 4,\n}\n\nexport const copyDone: BackendMessage = {\n  name: 'copyDone',\n  length: 4,\n}\n\ninterface NoticeOrError {\n  message: string | undefined\n  severity: string | undefined\n  code: string | undefined\n  detail: string | undefined\n  hint: string | undefined\n  position: string | undefined\n  internalPosition: string | undefined\n  internalQuery: string | undefined\n  where: string | undefined\n  schema: string | undefined\n  table: string | undefined\n  column: string | undefined\n  dataType: string | undefined\n  constraint: string | undefined\n  file: string | undefined\n  line: string | undefined\n  routine: string | undefined\n}\n\nexport class DatabaseError extends Error implements NoticeOrError {\n  public severity: string | undefined\n  public code: string | undefined\n  public detail: string | undefined\n  public hint: string | undefined\n  public position: string | undefined\n  public internalPosition: string | undefined\n  public internalQuery: string | undefined\n  public where: string | undefined\n  public schema: string | undefined\n  public table: string | undefined\n  public column: string | undefined\n  public dataType: string | undefined\n  public constraint: string | undefined\n  public file: string | undefined\n  public line: string | undefined\n  public routine: string | undefined\n  constructor(\n    message: string,\n    public readonly length: number,\n    public readonly name: MessageName\n  ) {\n    super(message)\n  }\n}\n\nexport class CopyDataMessage {\n  public readonly name = 'copyData'\n  constructor(\n    public readonly length: number,\n    public readonly chunk: Buffer\n  ) {}\n}\n\nexport class CopyResponse {\n  public readonly columnTypes: number[]\n  constructor(\n    public readonly length: number,\n    public readonly name: MessageName,\n    public readonly binary: boolean,\n    columnCount: number\n  ) {\n    this.columnTypes = new Array(columnCount)\n  }\n}\n\nexport class Field {\n  constructor(\n    public readonly name: string,\n    public readonly tableID: number,\n    public readonly columnID: number,\n    public readonly dataTypeID: number,\n    public readonly dataTypeSize: number,\n    public readonly dataTypeModifier: number,\n    public readonly format: Mode\n  ) {}\n}\n\nexport class RowDescriptionMessage {\n  public readonly name: MessageName = 'rowDescription'\n  public readonly fields: Field[]\n  constructor(\n    public readonly length: number,\n    public readonly fieldCount: number\n  ) {\n    this.fields = new Array(this.fieldCount)\n  }\n}\n\nexport class ParameterDescriptionMessage {\n  public readonly name: MessageName = 'parameterDescription'\n  public readonly dataTypeIDs: number[]\n  constructor(\n    public readonly length: number,\n    public readonly parameterCount: number\n  ) {\n    this.dataTypeIDs = new Array(this.parameterCount)\n  }\n}\n\nexport class ParameterStatusMessage {\n  public readonly name: MessageName = 'parameterStatus'\n  constructor(\n    public readonly length: number,\n    public readonly parameterName: string,\n    public readonly parameterValue: string\n  ) {}\n}\n\nexport class AuthenticationMD5Password implements BackendMessage {\n  public readonly name: MessageName = 'authenticationMD5Password'\n  constructor(\n    public readonly length: number,\n    public readonly salt: Buffer\n  ) {}\n}\n\nexport class BackendKeyDataMessage {\n  public readonly name: MessageName = 'backendKeyData'\n  constructor(\n    public readonly length: number,\n    public readonly processID: number,\n    public readonly secretKey: number\n  ) {}\n}\n\nexport class NotificationResponseMessage {\n  public readonly name: MessageName = 'notification'\n  constructor(\n    public readonly length: number,\n    public readonly processId: number,\n    public readonly channel: string,\n    public readonly payload: string\n  ) {}\n}\n\nexport class ReadyForQueryMessage {\n  public readonly name: MessageName = 'readyForQuery'\n  constructor(\n    public readonly length: number,\n    public readonly status: string\n  ) {}\n}\n\nexport class CommandCompleteMessage {\n  public readonly name: MessageName = 'commandComplete'\n  constructor(\n    public readonly length: number,\n    public readonly text: string\n  ) {}\n}\n\nexport class DataRowMessage {\n  public readonly fieldCount: number\n  public readonly name: MessageName = 'dataRow'\n  constructor(\n    public length: number,\n    public fields: any[]\n  ) {\n    this.fieldCount = fields.length\n  }\n}\n\nexport class NoticeMessage implements BackendMessage, NoticeOrError {\n  constructor(\n    public readonly length: number,\n    public readonly message: string | undefined\n  ) {}\n  public readonly name = 'notice'\n  public severity: string | undefined\n  public code: string | undefined\n  public detail: string | undefined\n  public hint: string | undefined\n  public position: string | undefined\n  public internalPosition: string | undefined\n  public internalQuery: string | undefined\n  public where: string | undefined\n  public schema: string | undefined\n  public table: string | undefined\n  public column: string | undefined\n  public dataType: string | undefined\n  public constraint: string | undefined\n  public file: string | undefined\n  public line: string | undefined\n  public routine: string | undefined\n}\n","import type { ParserOptions } from './interface.js'\nimport { Buffer } from './polyfills/buffer.js'\n\nconst JSON_parse = globalThis.JSON.parse\nconst JSON_stringify = globalThis.JSON.stringify\n\nexport const BOOL = 16,\n  BYTEA = 17,\n  CHAR = 18,\n  INT8 = 20,\n  INT2 = 21,\n  INT4 = 23,\n  REGPROC = 24,\n  TEXT = 25,\n  OID = 26,\n  TID = 27,\n  XID = 28,\n  CID = 29,\n  JSON = 114,\n  XML = 142,\n  PG_NODE_TREE = 194,\n  SMGR = 210,\n  PATH = 602,\n  POLYGON = 604,\n  CIDR = 650,\n  FLOAT4 = 700,\n  FLOAT8 = 701,\n  ABSTIME = 702,\n  RELTIME = 703,\n  TINTERVAL = 704,\n  CIRCLE = 718,\n  MACADDR8 = 774,\n  MONEY = 790,\n  MACADDR = 829,\n  INET = 869,\n  ACLITEM = 1033,\n  BPCHAR = 1042,\n  VARCHAR = 1043,\n  DATE = 1082,\n  TIME = 1083,\n  TIMESTAMP = 1114,\n  TIMESTAMPTZ = 1184,\n  INTERVAL = 1186,\n  TIMETZ = 1266,\n  BIT = 1560,\n  VARBIT = 1562,\n  NUMERIC = 1700,\n  REFCURSOR = 1790,\n  REGPROCEDURE = 2202,\n  REGOPER = 2203,\n  REGOPERATOR = 2204,\n  REGCLASS = 2205,\n  REGTYPE = 2206,\n  UUID = 2950,\n  TXID_SNAPSHOT = 2970,\n  PG_LSN = 3220,\n  PG_NDISTINCT = 3361,\n  PG_DEPENDENCIES = 3402,\n  TSVECTOR = 3614,\n  TSQUERY = 3615,\n  GTSVECTOR = 3642,\n  REGCONFIG = 3734,\n  REGDICTIONARY = 3769,\n  JSONB = 3802,\n  REGNAMESPACE = 4089,\n  REGROLE = 4096\n\nexport const arrayTypes = {\n  1001: BYTEA,\n  1002: CHAR,\n  1016: INT8,\n  1005: INT2,\n  1007: INT4,\n  1009: TEXT,\n  1028: OID,\n  199: JSON,\n  1021: FLOAT4,\n  1022: FLOAT8,\n  1015: VARCHAR,\n  3807: JSONB,\n  1182: DATE,\n  1115: TIMESTAMP,\n  1116: TIMESTAMPTZ,\n}\n\nexport const types = {\n  string: {\n    to: 0,\n    from: [TEXT, VARCHAR],\n    serialize: (x: string) => x,\n    parse: (x: string) => x,\n    forceTo: TEXT,\n  },\n  number: {\n    to: 0,\n    from: [INT2, INT4, OID, FLOAT4, FLOAT8],\n    serialize: (x: number) => x.toString(),\n    parse: (x: string) => +x,\n    forceTo: (x: number) => {\n      if (Number.isInteger(x)) {\n        return INT8\n      } else {\n        return FLOAT8\n      }\n    },\n  },\n  bigint: {\n    to: INT8,\n    from: [INT8],\n    js: [BigInt],\n    serialize: (x: bigint) => x.toString(),\n    parse: (x: string) => {\n      const n = BigInt(x)\n      if (n < Number.MIN_SAFE_INTEGER || n > Number.MAX_SAFE_INTEGER) {\n        return n // return BigInt\n      } else {\n        return Number(n) // in range of standard JS numbers so return number\n      }\n    },\n  },\n  json: {\n    to: JSON,\n    from: [JSON, JSONB],\n    serialize: (x: any) => JSON_stringify(x),\n    parse: (x: string) => JSON_parse(x),\n  },\n  boolean: {\n    to: BOOL,\n    from: [BOOL],\n    serialize: (x: boolean) => (x === true ? 't' : 'f'),\n    parse: (x: string) => x === 't',\n  },\n  date: {\n    to: 1184,\n    from: [DATE, TIMESTAMP, TIMESTAMPTZ],\n    js: [Date],\n    serialize: (x: Date | string | number) =>\n      (x instanceof Date ? x : new Date(x)).toISOString(),\n    parse: (x: string | number) => new Date(x),\n  },\n  bytea: {\n    to: BYTEA,\n    from: [BYTEA],\n    js: [Uint8Array, Buffer],\n    serialize: (x: Uint8Array) => '\\\\x' + Buffer.from(x).toString('hex'),\n    parse: (x: string): Uint8Array =>\n      new Uint8Array(Buffer.from(x.slice(2), 'hex')),\n  },\n  array: {\n    to: 0,\n    from: Object.keys(arrayTypes).map((x) => +x),\n    serialize: (x: any[]) => serializeArray(x),\n    parse: (x: string, typeId?: number) => {\n      let parser\n      if (typeId && typeId in arrayTypes) {\n        parser = parsers[arrayTypes[typeId as keyof typeof arrayTypes]]\n      }\n      return parseArray(x, parser)\n    },\n  },\n} satisfies TypeHandlers\n\nexport type TypeHandler = {\n  to: number\n  from: number | number[]\n  js?: any\n  serialize: (x: any) => string\n  parse: (x: string, typeId?: number) => any\n  forceTo?: number | ((x: any) => number)\n}\n\nexport type TypeHandlers = {\n  [key: string]: TypeHandler\n}\n\nconst defaultHandlers = typeHandlers(types)\n\nexport const parsers = defaultHandlers.parsers\nexport const serializers = defaultHandlers.serializers\nexport const serializerInstanceof = defaultHandlers.serializerInstanceof\n\nexport type Serializer = (x: any, setAllTypes?: boolean) => [string, number]\n\nexport function serializerFor(x: any): Serializer {\n  if (Array.isArray(x)) {\n    return serializers.array\n  }\n  const handler = serializers[typeof x]\n  if (handler) {\n    return handler\n  }\n  for (const [Type, handler] of serializerInstanceof) {\n    if (x instanceof Type) {\n      return handler\n    }\n  }\n  return serializers.json\n}\n\nexport function serializeType(\n  x: any,\n  setAllTypes = false,\n): [string | null, number] {\n  if (x === null || x === undefined) {\n    return [null, 0]\n  }\n  return serializerFor(x)(x, setAllTypes)\n}\n\nfunction escapeElement(elementRepresentation: string) {\n  const escaped = elementRepresentation\n    .replace(/\\\\/g, '\\\\\\\\')\n    .replace(/\"/g, '\\\\\"')\n  return '\"' + escaped + '\"'\n}\n\nfunction serializeArray(x: any[]) {\n  let result = '{'\n  for (let i = 0; i < x.length; i++) {\n    if (i > 0) {\n      result = result + ','\n    }\n    if (x[i] === null || typeof x[i] === 'undefined') {\n      result = result + 'NULL'\n    } else if (Array.isArray(x[i])) {\n      result = result + serializeArray(x[i])\n    } else if (ArrayBuffer.isView(x[i])) {\n      let item = x[i]\n      if (!(item instanceof Buffer)) {\n        const buf = Buffer.from(item.buffer, item.byteOffset, item.byteLength)\n        if (buf.length === item.byteLength) {\n          item = buf\n        } else {\n          item = buf.slice(item.byteOffset, item.byteOffset + item.byteLength)\n        }\n      }\n      result += '\\\\\\\\x' + item.toString('hex')\n    } else {\n      result += escapeElement(serializeType(x[i])[0]!)\n    }\n  }\n  result = result + '}'\n  return result\n}\n\nexport function parseArray(value: string, parser?: (s: string) => any) {\n  let i = 0\n  let char = null\n  let str = ''\n  let quoted = false\n  let last = 0\n  let p: string | undefined = undefined\n\n  function loop(x: string): any[] {\n    const xs = []\n    for (; i < x.length; i++) {\n      char = x[i]\n      if (quoted) {\n        if (char === '\\\\') {\n          str += x[++i]\n        } else if (char === '\"') {\n          xs.push(parser ? parser(str) : str)\n          str = ''\n          quoted = x[i + 1] === '\"'\n          last = i + 2\n        } else {\n          str += char\n        }\n      } else if (char === '\"') {\n        quoted = true\n      } else if (char === '{') {\n        last = ++i\n        xs.push(loop(x))\n      } else if (char === '}') {\n        quoted = false\n        last < i &&\n          xs.push(parser ? parser(x.slice(last, i)) : x.slice(last, i))\n        last = i + 1\n        break\n      } else if (char === ',' && p !== '}' && p !== '\"') {\n        xs.push(parser ? parser(x.slice(last, i)) : x.slice(last, i))\n        last = i + 1\n      }\n      p = char\n    }\n    last < i &&\n      xs.push(parser ? parser(x.slice(last, i + 1)) : x.slice(last, i + 1))\n    return xs\n  }\n\n  return loop(value)[0]\n}\n\nexport function parseType(\n  x: string,\n  type: number,\n  parsers?: ParserOptions,\n): any {\n  if (x === null) {\n    return null\n  }\n  const handler = parsers?.[type] ?? defaultHandlers.parsers[type]\n  if (handler) {\n    return handler(x, type)\n  } else {\n    return x\n  }\n}\n\nfunction typeHandlers(types: TypeHandlers) {\n  return Object.keys(types).reduce(\n    ({ parsers, serializers, serializerInstanceof }, k) => {\n      const { to, from, serialize, parse = null, forceTo } = types[k]\n      const theSerializer = (x: any, setAllTypes = false) => {\n        return [\n          serialize(x),\n          setAllTypes && forceTo\n            ? typeof forceTo === 'function'\n              ? forceTo(x)\n              : forceTo\n            : to,\n        ] as [string, number]\n      }\n      serializers[to] = theSerializer\n      serializers[k] = theSerializer\n      if (types[k].js) {\n        types[k].js.forEach((Type: any) =>\n          serializerInstanceof.push([Type, theSerializer]),\n        )\n      }\n      if (parse) {\n        if (Array.isArray(from)) {\n          from.forEach((f) => (parsers[f] = parse))\n        } else {\n          parsers[from] = parse\n        }\n        parsers[k] = parse\n      }\n      return { parsers, serializers, serializerInstanceof }\n    },\n    {\n      parsers: {} as {\n        [key: number | string]: (x: string, typeId?: number) => any\n      },\n      serializers: {} as {\n        [key: number | string]: Serializer\n      },\n      serializerInstanceof: [] as Array<[any, Serializer]>,\n    },\n  )\n}\n","// Buffer polyfill for browsers\nimport { Buffer as BrowserBuffer } from 'buffer/' // note: the trailing slash is important to reference the installed package instead of the built-in module\n\nlet Buffer: BufferConstructor\n\nif (globalThis.Buffer) {\n  Buffer = globalThis.Buffer\n} else {\n  Buffer = BrowserBuffer as any\n}\n\nexport { Buffer }\n","import tinyTar from 'tinytar'\nimport { IN_NODE } from './utils.js'\nimport type { PostgresMod } from './postgresMod.js'\n\nexport async function loadExtensionBundle(\n  bundlePath: URL,\n): Promise<Blob | null> {\n  // Async load the extension bundle tar file\n  // could be from a URL or a file\n  if (IN_NODE) {\n    const fs = await import('fs')\n    const zlib = await import('zlib')\n    const { Writable } = await import('stream')\n    const { pipeline } = await import('stream/promises')\n\n    if (!fs.existsSync(bundlePath)) {\n      throw new Error(`Extension bundle not found: ${bundlePath}`)\n    }\n\n    const gunzip = zlib.createGunzip()\n    const chunks: Uint8Array[] = []\n\n    await pipeline(\n      fs.createReadStream(bundlePath),\n      gunzip,\n      new Writable({\n        write(chunk, _encoding, callback) {\n          chunks.push(chunk)\n          callback()\n        },\n      }),\n    )\n    return new Blob(chunks)\n  } else {\n    const response = await fetch(bundlePath.toString())\n    if (!response.ok || !response.body) {\n      return null\n    } else if (response.headers.get('Content-Encoding') === 'gzip') {\n      // Although the bundle is manually compressed, some servers will recognize\n      // that and add a content-encoding header. Fetch will then automatically\n      // decompress the response.\n      return response.blob()\n    } else {\n      const decompressionStream = new DecompressionStream('gzip')\n      const decompressedStream = new Response(\n        response.body.pipeThrough(decompressionStream),\n      )\n      return decompressedStream.blob()\n    }\n  }\n}\n\nexport async function loadExtensions(\n  mod: PostgresMod,\n  log: (...args: any[]) => void,\n) {\n  for (const ext in mod.pg_extensions) {\n    let blob\n    try {\n      blob = await mod.pg_extensions[ext]\n    } catch (err) {\n      console.error('Failed to fetch extension:', ext, err)\n      continue\n    }\n    if (blob) {\n      const bytes = new Uint8Array(await blob.arrayBuffer())\n      loadExtension(mod, ext, bytes, log)\n    } else {\n      console.error('Could not get binary data for extension:', ext)\n    }\n  }\n}\n\nfunction loadExtension(\n  mod: PostgresMod,\n  _ext: string,\n  bytes: Uint8Array,\n  log: (...args: any[]) => void,\n) {\n  const data = tinyTar.untar(bytes)\n  data.forEach((file: any) => {\n    if (!file.name.startsWith('.')) {\n      const filePath = mod.WASM_PREFIX + '/' + file.name\n      if (file.name.endsWith('.so')) {\n        const extOk = (...args: any[]) => {\n          log('pgfs:ext OK', filePath, args)\n        }\n        const extFail = (...args: any[]) => {\n          log('pgfs:ext FAIL', filePath, args)\n        }\n        mod.FS.createPreloadedFile(\n          dirname(filePath),\n          file.name.split('/').pop()!.slice(0, -3),\n          file.data as any, // There is a type error in Emscripten's FS.createPreloadedFile, this excepts a Uint8Array, but the type is defined as any\n          true,\n          true,\n          extOk,\n          extFail,\n          false,\n        )\n      } else {\n        mod.FS.writeFile(filePath, file.data)\n      }\n    }\n  })\n}\n\nfunction dirname(path: string) {\n  const last = path.lastIndexOf('/')\n  if (last > 0) {\n    return path.slice(0, last)\n  } else {\n    return path\n  }\n}\n","import { Buffer } from 'node:buffer'\nimport { DatabaseError } from './messages'\nimport { serialize } from './serializer'\nimport { Parser, MessageCallback } from './parser'\n\nexport function parse(stream: NodeJS.ReadableStream, callback: MessageCallback): Promise<void> {\n  const parser = new Parser()\n  stream.on('data', (buffer: Buffer) => parser.parse(buffer, callback))\n  return new Promise((resolve) => stream.on('end', () => resolve()))\n}\n\nexport { serialize, DatabaseError }\n","import { Buffer } from 'node:buffer'\nimport { Writer } from './buffer-writer'\n\nconst enum code {\n  startup = 0x70,\n  query = 0x51,\n  parse = 0x50,\n  bind = 0x42,\n  execute = 0x45,\n  flush = 0x48,\n  sync = 0x53,\n  end = 0x58,\n  close = 0x43,\n  describe = 0x44,\n  copyFromChunk = 0x64,\n  copyDone = 0x63,\n  copyFail = 0x66,\n}\n\nconst writer = new Writer()\n\nconst startup = (opts: Record<string, string>): Buffer => {\n  // protocol version\n  writer.addInt16(3).addInt16(0)\n  for (const key of Object.keys(opts)) {\n    writer.addCString(key).addCString(opts[key])\n  }\n\n  writer.addCString('client_encoding').addCString('UTF8')\n\n  var bodyBuffer = writer.addCString('').flush()\n  // this message is sent without a code\n\n  var length = bodyBuffer.length + 4\n\n  return new Writer().addInt32(length).add(bodyBuffer).flush()\n}\n\nconst requestSsl = (): Buffer => {\n  const response = Buffer.allocUnsafe(8)\n  response.writeInt32BE(8, 0)\n  response.writeInt32BE(80877103, 4)\n  return response\n}\n\nconst password = (password: string): Buffer => {\n  return writer.addCString(password).flush(code.startup)\n}\n\nconst sendSASLInitialResponseMessage = function (mechanism: string, initialResponse: string): Buffer {\n  // 0x70 = 'p'\n  writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse)\n\n  return writer.flush(code.startup)\n}\n\nconst sendSCRAMClientFinalMessage = function (additionalData: string): Buffer {\n  return writer.addString(additionalData).flush(code.startup)\n}\n\nconst query = (text: string): Buffer => {\n  return writer.addCString(text).flush(code.query)\n}\n\ntype ParseOpts = {\n  name?: string\n  types?: number[]\n  text: string\n}\n\nconst emptyArray: any[] = []\n\nconst parse = (query: ParseOpts): Buffer => {\n  // expect something like this:\n  // { name: 'queryName',\n  //   text: 'select * from blah',\n  //   types: ['int8', 'bool'] }\n\n  // normalize missing query names to allow for null\n  const name = query.name || ''\n  if (name.length > 63) {\n    /* eslint-disable no-console */\n    console.error('Warning! Postgres only supports 63 characters for query names.')\n    console.error('You supplied %s (%s)', name, name.length)\n    console.error('This can cause conflicts and silent errors executing queries')\n    /* eslint-enable no-console */\n  }\n\n  const types = query.types || emptyArray\n\n  var len = types.length\n\n  var buffer = writer\n    .addCString(name) // name of query\n    .addCString(query.text) // actual query text\n    .addInt16(len)\n\n  for (var i = 0; i < len; i++) {\n    buffer.addInt32(types[i])\n  }\n\n  return writer.flush(code.parse)\n}\n\ntype ValueMapper = (param: any, index: number) => any\n\ntype BindOpts = {\n  portal?: string\n  binary?: boolean\n  statement?: string\n  values?: any[]\n  // optional map from JS value to postgres value per parameter\n  valueMapper?: ValueMapper\n}\n\nconst paramWriter = new Writer()\n\n// make this a const enum so typescript will inline the value\nconst enum ParamType {\n  STRING = 0,\n  BINARY = 1,\n}\n\nconst writeValues = function (values: any[], valueMapper?: ValueMapper): void {\n  for (let i = 0; i < values.length; i++) {\n    const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i]\n    if (mappedVal == null) {\n      // add the param type (string) to the writer\n      writer.addInt16(ParamType.STRING)\n      // write -1 to the param writer to indicate null\n      paramWriter.addInt32(-1)\n    } else if (mappedVal instanceof Buffer) {\n      // add the param type (binary) to the writer\n      writer.addInt16(ParamType.BINARY)\n      // add the buffer to the param writer\n      paramWriter.addInt32(mappedVal.length)\n      paramWriter.add(mappedVal)\n    } else {\n      // add the param type (string) to the writer\n      writer.addInt16(ParamType.STRING)\n      paramWriter.addInt32(Buffer.byteLength(mappedVal))\n      paramWriter.addString(mappedVal)\n    }\n  }\n}\n\nconst bind = (config: BindOpts = {}): Buffer => {\n  // normalize config\n  const portal = config.portal || ''\n  const statement = config.statement || ''\n  const binary = config.binary || false\n  const values = config.values || emptyArray\n  const len = values.length\n\n  writer.addCString(portal).addCString(statement)\n  writer.addInt16(len)\n\n  writeValues(values, config.valueMapper)\n\n  writer.addInt16(len)\n  writer.add(paramWriter.flush())\n\n  // format code\n  writer.addInt16(binary ? ParamType.BINARY : ParamType.STRING)\n  return writer.flush(code.bind)\n}\n\ntype ExecOpts = {\n  portal?: string\n  rows?: number\n}\n\nconst emptyExecute = Buffer.from([code.execute, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00])\n\nconst execute = (config?: ExecOpts): Buffer => {\n  // this is the happy path for most queries\n  if (!config || (!config.portal && !config.rows)) {\n    return emptyExecute\n  }\n\n  const portal = config.portal || ''\n  const rows = config.rows || 0\n\n  const portalLength = Buffer.byteLength(portal)\n  const len = 4 + portalLength + 1 + 4\n  // one extra bit for code\n  const buff = Buffer.allocUnsafe(1 + len)\n  buff[0] = code.execute\n  buff.writeInt32BE(len, 1)\n  buff.write(portal, 5, 'utf-8')\n  buff[portalLength + 5] = 0 // null terminate portal cString\n  buff.writeUInt32BE(rows, buff.length - 4)\n  return buff\n}\n\nconst cancel = (processID: number, secretKey: number): Buffer => {\n  const buffer = Buffer.allocUnsafe(16)\n  buffer.writeInt32BE(16, 0)\n  buffer.writeInt16BE(1234, 4)\n  buffer.writeInt16BE(5678, 6)\n  buffer.writeInt32BE(processID, 8)\n  buffer.writeInt32BE(secretKey, 12)\n  return buffer\n}\n\ntype PortalOpts = {\n  type: 'S' | 'P'\n  name?: string\n}\n\nconst cstringMessage = (code: code, string: string): Buffer => {\n  const stringLen = Buffer.byteLength(string)\n  const len = 4 + stringLen + 1\n  // one extra bit for code\n  const buffer = Buffer.allocUnsafe(1 + len)\n  buffer[0] = code\n  buffer.writeInt32BE(len, 1)\n  buffer.write(string, 5, 'utf-8')\n  buffer[len] = 0 // null terminate cString\n  return buffer\n}\n\nconst emptyDescribePortal = writer.addCString('P').flush(code.describe)\nconst emptyDescribeStatement = writer.addCString('S').flush(code.describe)\n\nconst describe = (msg: PortalOpts): Buffer => {\n  return msg.name\n    ? cstringMessage(code.describe, `${msg.type}${msg.name || ''}`)\n    : msg.type === 'P'\n    ? emptyDescribePortal\n    : emptyDescribeStatement\n}\n\nconst close = (msg: PortalOpts): Buffer => {\n  const text = `${msg.type}${msg.name || ''}`\n  return cstringMessage(code.close, text)\n}\n\nconst copyData = (chunk: Buffer): Buffer => {\n  return writer.add(chunk).flush(code.copyFromChunk)\n}\n\nconst copyFail = (message: string): Buffer => {\n  return cstringMessage(code.copyFail, message)\n}\n\nconst codeOnlyBuffer = (code: code): Buffer => Buffer.from([code, 0x00, 0x00, 0x00, 0x04])\n\nconst flushBuffer = codeOnlyBuffer(code.flush)\nconst syncBuffer = codeOnlyBuffer(code.sync)\nconst endBuffer = codeOnlyBuffer(code.end)\nconst copyDoneBuffer = codeOnlyBuffer(code.copyDone)\n\nconst serialize = {\n  startup,\n  password,\n  requestSsl,\n  sendSASLInitialResponseMessage,\n  sendSCRAMClientFinalMessage,\n  query,\n  parse,\n  bind,\n  execute,\n  describe,\n  close,\n  flush: () => flushBuffer,\n  sync: () => syncBuffer,\n  end: () => endBuffer,\n  copyData,\n  copyDone: () => copyDoneBuffer,\n  copyFail,\n  cancel,\n}\n\nexport { serialize }\n","//binary data writer tuned for encoding binary specific to the postgres binary protocol\nimport { Buffer } from 'node:buffer'\n\nexport class Writer {\n  private buffer: Buffer\n  private offset: number = 5\n  private headerPosition: number = 0\n  constructor(private size = 256) {\n    this.buffer = Buffer.allocUnsafe(size)\n  }\n\n  private ensure(size: number): void {\n    var remaining = this.buffer.length - this.offset\n    if (remaining < size) {\n      var oldBuffer = this.buffer\n      // exponential growth factor of around ~ 1.5\n      // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n      var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size\n      this.buffer = Buffer.allocUnsafe(newSize)\n      oldBuffer.copy(this.buffer)\n    }\n  }\n\n  public addInt32(num: number): Writer {\n    this.ensure(4)\n    this.buffer[this.offset++] = (num >>> 24) & 0xff\n    this.buffer[this.offset++] = (num >>> 16) & 0xff\n    this.buffer[this.offset++] = (num >>> 8) & 0xff\n    this.buffer[this.offset++] = (num >>> 0) & 0xff\n    return this\n  }\n\n  public addInt16(num: number): Writer {\n    this.ensure(2)\n    this.buffer[this.offset++] = (num >>> 8) & 0xff\n    this.buffer[this.offset++] = (num >>> 0) & 0xff\n    return this\n  }\n\n  public addCString(string: string): Writer {\n    if (!string) {\n      this.ensure(1)\n    } else {\n      var len = Buffer.byteLength(string)\n      this.ensure(len + 1) // +1 for null terminator\n      this.buffer.write(string, this.offset, 'utf-8')\n      this.offset += len\n    }\n\n    this.buffer[this.offset++] = 0 // null terminator\n    return this\n  }\n\n  public addString(string: string = ''): Writer {\n    var len = Buffer.byteLength(string)\n    this.ensure(len)\n    this.buffer.write(string, this.offset)\n    this.offset += len\n    return this\n  }\n\n  public add(otherBuffer: Buffer): Writer {\n    this.ensure(otherBuffer.length)\n    otherBuffer.copy(this.buffer, this.offset)\n    this.offset += otherBuffer.length\n    return this\n  }\n\n  private join(code?: number): Buffer {\n    if (code) {\n      this.buffer[this.headerPosition] = code\n      //length is everything in this packet minus the code\n      const length = this.offset - (this.headerPosition + 1)\n      this.buffer.writeInt32BE(length, this.headerPosition + 1)\n    }\n    return this.buffer.slice(code ? 0 : 5, this.offset)\n  }\n\n  public flush(code?: number): Buffer {\n    var result = this.join(code)\n    this.offset = 5\n    this.headerPosition = 0\n    this.buffer = Buffer.allocUnsafe(this.size)\n    return result\n  }\n}\n","import { Buffer } from 'node:buffer'\n\nimport { TransformOptions } from 'stream'\nimport {\n  Mode,\n  bindComplete,\n  parseComplete,\n  closeComplete,\n  noData,\n  portalSuspended,\n  copyDone,\n  replicationStart,\n  emptyQuery,\n  ReadyForQueryMessage,\n  CommandCompleteMessage,\n  CopyDataMessage,\n  CopyResponse,\n  NotificationResponseMessage,\n  RowDescriptionMessage,\n  ParameterDescriptionMessage,\n  Field,\n  DataRowMessage,\n  ParameterStatusMessage,\n  BackendKeyDataMessage,\n  DatabaseError,\n  BackendMessage,\n  MessageName,\n  AuthenticationMD5Password,\n  NoticeMessage,\n} from './messages'\nimport { BufferReader } from './buffer-reader'\n\n// every message is prefixed with a single bye\nconst CODE_LENGTH = 1\n// every message has an int32 length which includes itself but does\n// NOT include the code in the length\nconst LEN_LENGTH = 4\n\nconst HEADER_LENGTH = CODE_LENGTH + LEN_LENGTH\n\nexport type Packet = {\n  code: number\n  packet: Buffer\n}\n\nconst emptyBuffer = Buffer.allocUnsafe(0)\n\ntype StreamOptions = TransformOptions & {\n  mode: Mode\n}\n\nconst enum MessageCodes {\n  DataRow = 0x44, // D\n  ParseComplete = 0x31, // 1\n  BindComplete = 0x32, // 2\n  CloseComplete = 0x33, // 3\n  CommandComplete = 0x43, // C\n  ReadyForQuery = 0x5a, // Z\n  NoData = 0x6e, // n\n  NotificationResponse = 0x41, // A\n  AuthenticationResponse = 0x52, // R\n  ParameterStatus = 0x53, // S\n  BackendKeyData = 0x4b, // K\n  ErrorMessage = 0x45, // E\n  NoticeMessage = 0x4e, // N\n  RowDescriptionMessage = 0x54, // T\n  ParameterDescriptionMessage = 0x74, // t\n  PortalSuspended = 0x73, // s\n  ReplicationStart = 0x57, // W\n  EmptyQuery = 0x49, // I\n  CopyIn = 0x47, // G\n  CopyOut = 0x48, // H\n  CopyDone = 0x63, // c\n  CopyData = 0x64, // d\n}\n\nexport type MessageCallback = (msg: BackendMessage) => void\n\nexport class Parser {\n  private buffer: Buffer = emptyBuffer\n  private bufferLength: number = 0\n  private bufferOffset: number = 0\n  private reader = new BufferReader()\n  readonly mode: Mode\n\n  constructor(opts?: StreamOptions) {\n    if (opts?.mode === 'binary') {\n      throw new Error('Binary mode not supported yet')\n    }\n    this.mode = opts?.mode || 'text'\n  }\n\n  public parse(buffer: Buffer, callback: MessageCallback) {\n    this.mergeBuffer(buffer)\n    const bufferFullLength = this.bufferOffset + this.bufferLength\n    let offset = this.bufferOffset\n    while (offset + HEADER_LENGTH <= bufferFullLength) {\n      // code is 1 byte long - it identifies the message type\n      const code = this.buffer[offset]\n      // length is 1 Uint32BE - it is the length of the message EXCLUDING the code\n      const length = this.buffer.readUInt32BE(offset + CODE_LENGTH)\n      const fullMessageLength = CODE_LENGTH + length\n      if (fullMessageLength + offset <= bufferFullLength) {\n        const message = this.handlePacket(offset + HEADER_LENGTH, code, length, this.buffer)\n        callback(message)\n        offset += fullMessageLength\n      } else {\n        break\n      }\n    }\n    if (offset === bufferFullLength) {\n      // No more use for the buffer\n      this.buffer = emptyBuffer\n      this.bufferLength = 0\n      this.bufferOffset = 0\n    } else {\n      // Adjust the cursors of remainingBuffer\n      this.bufferLength = bufferFullLength - offset\n      this.bufferOffset = offset\n    }\n  }\n\n  private mergeBuffer(buffer: Buffer): void {\n    if (this.bufferLength > 0) {\n      const newLength = this.bufferLength + buffer.byteLength\n      const newFullLength = newLength + this.bufferOffset\n      if (newFullLength > this.buffer.byteLength) {\n        // We can't concat the new buffer with the remaining one\n        let newBuffer: Buffer\n        if (newLength <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) {\n          // We can move the relevant part to the beginning of the buffer instead of allocating a new buffer\n          newBuffer = this.buffer\n        } else {\n          // Allocate a new larger buffer\n          let newBufferLength = this.buffer.byteLength * 2\n          while (newLength >= newBufferLength) {\n            newBufferLength *= 2\n          }\n          newBuffer = Buffer.allocUnsafe(newBufferLength)\n        }\n        // Move the remaining buffer to the new one\n        this.buffer.copy(newBuffer, 0, this.bufferOffset, this.bufferOffset + this.bufferLength)\n        this.buffer = newBuffer\n        this.bufferOffset = 0\n      }\n      // Concat the new buffer with the remaining one\n      buffer.copy(this.buffer, this.bufferOffset + this.bufferLength)\n      this.bufferLength = newLength\n    } else {\n      this.buffer = buffer\n      this.bufferOffset = 0\n      this.bufferLength = buffer.byteLength\n    }\n  }\n\n  private handlePacket(offset: number, code: number, length: number, bytes: Buffer): BackendMessage {\n    switch (code) {\n      case MessageCodes.BindComplete:\n        return bindComplete\n      case MessageCodes.ParseComplete:\n        return parseComplete\n      case MessageCodes.CloseComplete:\n        return closeComplete\n      case MessageCodes.NoData:\n        return noData\n      case MessageCodes.PortalSuspended:\n        return portalSuspended\n      case MessageCodes.CopyDone:\n        return copyDone\n      case MessageCodes.ReplicationStart:\n        return replicationStart\n      case MessageCodes.EmptyQuery:\n        return emptyQuery\n      case MessageCodes.DataRow:\n        return this.parseDataRowMessage(offset, length, bytes)\n      case MessageCodes.CommandComplete:\n        return this.parseCommandCompleteMessage(offset, length, bytes)\n      case MessageCodes.ReadyForQuery:\n        return this.parseReadyForQueryMessage(offset, length, bytes)\n      case MessageCodes.NotificationResponse:\n        return this.parseNotificationMessage(offset, length, bytes)\n      case MessageCodes.AuthenticationResponse:\n        return this.parseAuthenticationResponse(offset, length, bytes)\n      case MessageCodes.ParameterStatus:\n        return this.parseParameterStatusMessage(offset, length, bytes)\n      case MessageCodes.BackendKeyData:\n        return this.parseBackendKeyData(offset, length, bytes)\n      case MessageCodes.ErrorMessage:\n        return this.parseErrorMessage(offset, length, bytes, 'error')\n      case MessageCodes.NoticeMessage:\n        return this.parseErrorMessage(offset, length, bytes, 'notice')\n      case MessageCodes.RowDescriptionMessage:\n        return this.parseRowDescriptionMessage(offset, length, bytes)\n      case MessageCodes.ParameterDescriptionMessage:\n        return this.parseParameterDescriptionMessage(offset, length, bytes)\n      case MessageCodes.CopyIn:\n        return this.parseCopyInMessage(offset, length, bytes)\n      case MessageCodes.CopyOut:\n        return this.parseCopyOutMessage(offset, length, bytes)\n      case MessageCodes.CopyData:\n        return this.parseCopyData(offset, length, bytes)\n      default:\n        return new DatabaseError('received invalid response: ' + code.toString(16), length, 'error')\n    }\n  }\n\n  private parseReadyForQueryMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const status = this.reader.string(1)\n    return new ReadyForQueryMessage(length, status)\n  }\n\n  private parseCommandCompleteMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const text = this.reader.cstring()\n    return new CommandCompleteMessage(length, text)\n  }\n\n  private parseCopyData(offset: number, length: number, bytes: Buffer) {\n    const chunk = bytes.slice(offset, offset + (length - 4))\n    return new CopyDataMessage(length, chunk)\n  }\n\n  private parseCopyInMessage(offset: number, length: number, bytes: Buffer) {\n    return this.parseCopyMessage(offset, length, bytes, 'copyInResponse')\n  }\n\n  private parseCopyOutMessage(offset: number, length: number, bytes: Buffer) {\n    return this.parseCopyMessage(offset, length, bytes, 'copyOutResponse')\n  }\n\n  private parseCopyMessage(offset: number, length: number, bytes: Buffer, messageName: MessageName) {\n    this.reader.setBuffer(offset, bytes)\n    const isBinary = this.reader.byte() !== 0\n    const columnCount = this.reader.int16()\n    const message = new CopyResponse(length, messageName, isBinary, columnCount)\n    for (let i = 0; i < columnCount; i++) {\n      message.columnTypes[i] = this.reader.int16()\n    }\n    return message\n  }\n\n  private parseNotificationMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const processId = this.reader.int32()\n    const channel = this.reader.cstring()\n    const payload = this.reader.cstring()\n    return new NotificationResponseMessage(length, processId, channel, payload)\n  }\n\n  private parseRowDescriptionMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const fieldCount = this.reader.int16()\n    const message = new RowDescriptionMessage(length, fieldCount)\n    for (let i = 0; i < fieldCount; i++) {\n      message.fields[i] = this.parseField()\n    }\n    return message\n  }\n\n  private parseField(): Field {\n    const name = this.reader.cstring()\n    const tableID = this.reader.int32()\n    const columnID = this.reader.int16()\n    const dataTypeID = this.reader.int32()\n    const dataTypeSize = this.reader.int16()\n    const dataTypeModifier = this.reader.int32()\n    const mode = this.reader.int16() === 0 ? 'text' : 'binary'\n    return new Field(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, mode)\n  }\n\n  private parseParameterDescriptionMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const parameterCount = this.reader.int16()\n    const message = new ParameterDescriptionMessage(length, parameterCount)\n    for (let i = 0; i < parameterCount; i++) {\n      message.dataTypeIDs[i] = this.reader.int32()\n    }\n    return message\n  }\n\n  private parseDataRowMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const fieldCount = this.reader.int16()\n    const fields: any[] = new Array(fieldCount)\n    for (let i = 0; i < fieldCount; i++) {\n      const len = this.reader.int32()\n      // a -1 for length means the value of the field is null\n      fields[i] = len === -1 ? null : this.reader.string(len)\n    }\n    return new DataRowMessage(length, fields)\n  }\n\n  private parseParameterStatusMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const name = this.reader.cstring()\n    const value = this.reader.cstring()\n    return new ParameterStatusMessage(length, name, value)\n  }\n\n  private parseBackendKeyData(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const processID = this.reader.int32()\n    const secretKey = this.reader.int32()\n    return new BackendKeyDataMessage(length, processID, secretKey)\n  }\n\n  public parseAuthenticationResponse(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const code = this.reader.int32()\n    // TODO(bmc): maybe better types here\n    const message: BackendMessage & any = {\n      name: 'authenticationOk',\n      length,\n    }\n\n    switch (code) {\n      case 0: // AuthenticationOk\n        break\n      case 3: // AuthenticationCleartextPassword\n        if (message.length === 8) {\n          message.name = 'authenticationCleartextPassword'\n        }\n        break\n      case 5: // AuthenticationMD5Password\n        if (message.length === 12) {\n          message.name = 'authenticationMD5Password'\n          const salt = this.reader.bytes(4)\n          return new AuthenticationMD5Password(length, salt)\n        }\n        break\n      case 10: // AuthenticationSASL\n        message.name = 'authenticationSASL'\n        message.mechanisms = []\n        let mechanism: string\n        do {\n          mechanism = this.reader.cstring()\n\n          if (mechanism) {\n            message.mechanisms.push(mechanism)\n          }\n        } while (mechanism)\n        break\n      case 11: // AuthenticationSASLContinue\n        message.name = 'authenticationSASLContinue'\n        message.data = this.reader.string(length - 8)\n        break\n      case 12: // AuthenticationSASLFinal\n        message.name = 'authenticationSASLFinal'\n        message.data = this.reader.string(length - 8)\n        break\n      default:\n        throw new Error('Unknown authenticationOk message type ' + code)\n    }\n    return message\n  }\n\n  private parseErrorMessage(offset: number, length: number, bytes: Buffer, name: MessageName) {\n    this.reader.setBuffer(offset, bytes)\n    const fields: Record<string, string> = {}\n    let fieldType = this.reader.string(1)\n    while (fieldType !== '\\0') {\n      fields[fieldType] = this.reader.cstring()\n      fieldType = this.reader.string(1)\n    }\n\n    const messageValue = fields.M\n\n    const message =\n      name === 'notice' ? new NoticeMessage(length, messageValue) : new DatabaseError(messageValue, length, name)\n\n    message.severity = fields.S\n    message.code = fields.C\n    message.detail = fields.D\n    message.hint = fields.H\n    message.position = fields.P\n    message.internalPosition = fields.p\n    message.internalQuery = fields.q\n    message.where = fields.W\n    message.schema = fields.s\n    message.table = fields.t\n    message.column = fields.c\n    message.dataType = fields.d\n    message.constraint = fields.n\n    message.file = fields.F\n    message.line = fields.L\n    message.routine = fields.R\n    return message\n  }\n}\n","import { Buffer } from 'node:buffer'\n\nconst emptyBuffer = Buffer.allocUnsafe(0)\n\nexport class BufferReader {\n  private buffer: Buffer = emptyBuffer\n\n  // TODO(bmc): support non-utf8 encoding?\n  private encoding = 'utf-8' as const\n\n  constructor(private offset: number = 0) {}\n\n  public setBuffer(offset: number, buffer: Buffer): void {\n    this.offset = offset\n    this.buffer = buffer\n  }\n\n  public int16(): number {\n    const result = this.buffer.readInt16BE(this.offset)\n    this.offset += 2\n    return result\n  }\n\n  public byte(): number {\n    const result = this.buffer[this.offset]\n    this.offset++\n    return result\n  }\n\n  public int32(): number {\n    const result = this.buffer.readInt32BE(this.offset)\n    this.offset += 4\n    return result\n  }\n\n  public string(length: number): string {\n    const result = this.buffer.toString(this.encoding, this.offset, this.offset + length)\n    this.offset += length\n    return result\n  }\n\n  public cstring(): string {\n    const start = this.offset\n    let end = start\n    while (this.buffer[end++] !== 0) {}\n    this.offset = end\n    return this.buffer.toString(this.encoding, start, end - 1)\n  }\n\n  public bytes(length: number): Buffer {\n    const result = this.buffer.slice(this.offset, this.offset + length)\n    this.offset += length\n    return result\n  }\n}\n","import type { BackendMessage, NoticeMessage } from 'pg-protocol/src/messages.js'\nimport type { Filesystem } from './fs/types.js'\nimport type { DumpTarCompressionOptions } from './fs/tarUtils.js'\n\nexport type FilesystemType = 'nodefs' | 'idbfs' | 'memoryfs'\n\nexport type DebugLevel = 0 | 1 | 2 | 3 | 4 | 5\n\nexport type RowMode = 'array' | 'object'\n\nexport interface ParserOptions {\n  [pgType: number]: (value: string) => any\n}\n\nexport interface QueryOptions {\n  rowMode?: RowMode\n  parsers?: ParserOptions\n  blob?: Blob | File\n  onNotice?: (notice: NoticeMessage) => void\n  setAllTypes?: boolean\n}\n\nexport interface ExecProtocolOptions {\n  syncToFs?: boolean\n  onNotice?: (notice: NoticeMessage) => void\n}\n\nexport interface ExtensionSetupResult {\n  emscriptenOpts?: any\n  namespaceObj?: any\n  bundlePath?: URL\n  init?: () => Promise<void>\n  close?: () => Promise<void>\n}\n\nexport type ExtensionSetup = (\n  pg: PGliteInterface,\n  emscriptenOpts: any,\n  clientOnly?: boolean,\n) => Promise<ExtensionSetupResult>\n\nexport interface Extension {\n  name: string\n  setup: ExtensionSetup\n}\n\nexport type Extensions = {\n  [namespace: string]: Extension | URL\n}\n\nexport interface DumpDataDirResult {\n  tarball: Uint8Array\n  extension: '.tar' | '.tgz'\n  filename: string\n}\n\nexport interface PGliteOptions {\n  dataDir?: string\n  username?: string\n  database?: string\n  fs?: Filesystem\n  debug?: DebugLevel\n  relaxedDurability?: boolean\n  extensions?: Extensions\n  loadDataDir?: Blob | File\n  initialMemory?: number\n}\n\nexport type PGliteInterface = {\n  readonly waitReady: Promise<void>\n  readonly debug: DebugLevel\n  readonly ready: boolean\n  readonly closed: boolean\n\n  close(): Promise<void>\n  query<T>(\n    query: string,\n    params?: any[],\n    options?: QueryOptions,\n  ): Promise<Results<T>>\n  exec(query: string, options?: QueryOptions): Promise<Array<Results>>\n  transaction<T>(\n    callback: (tx: Transaction) => Promise<T>,\n  ): Promise<T | undefined>\n  execProtocolRaw(\n    message: Uint8Array,\n    options?: ExecProtocolOptions,\n  ): Promise<Uint8Array>\n  execProtocol(\n    message: Uint8Array,\n    options?: ExecProtocolOptions,\n  ): Promise<Array<[BackendMessage, Uint8Array]>>\n  listen(\n    channel: string,\n    callback: (payload: string) => void,\n  ): Promise<() => Promise<void>>\n  unlisten(channel: string, callback?: (payload: string) => void): Promise<void>\n  onNotification(\n    callback: (channel: string, payload: string) => void,\n  ): () => void\n  offNotification(callback: (channel: string, payload: string) => void): void\n  dumpDataDir(compression?: DumpTarCompressionOptions): Promise<File | Blob>\n}\n\nexport type PGliteInterfaceExtensions<E> = E extends Extensions\n  ? {\n      [K in keyof E]: E[K] extends Extension\n        ? Awaited<ReturnType<E[K]['setup']>>['namespaceObj'] extends infer N\n          ? N extends undefined | null | void\n            ? never\n            : N\n          : never\n        : never\n    }\n  : Record<string, never>\n\nexport type Row<T = { [key: string]: any }> = T\n\nexport type Results<T = { [key: string]: any }> = {\n  rows: Row<T>[]\n  affectedRows?: number\n  fields: { name: string; dataTypeID: number }[]\n  blob?: Blob // Only set when a file is returned, such as from a COPY command\n}\n\nexport interface Transaction {\n  query<T>(\n    query: string,\n    params?: any[],\n    options?: QueryOptions,\n  ): Promise<Results<T>>\n  exec(query: string, options?: QueryOptions): Promise<Array<Results>>\n  rollback(): Promise<void>\n  get closed(): boolean\n}\n"],"mappings":"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","names":["require_base64_js","__commonJSMin","exports","init_esm_shims","byteLength","toByteArray","fromByteArray","lookup","revLookup","Arr","code","i","len","getLens","b64","validLen","placeHoldersLen","lens","_byteLength","tmp","arr","curByte","tripletToBase64","num","encodeChunk","uint8","start","end","output","extraBytes","parts","maxChunkLength","len2","require_ieee754","__commonJSMin","exports","init_esm_shims","buffer","offset","isLE","mLen","nBytes","e","m","eLen","eMax","eBias","nBits","i","d","s","value","rt","require_buffer","__commonJSMin","exports","init_esm_shims","base64","ieee754","customInspectSymbol","Buffer","SlowBuffer","K_MAX_LENGTH","typedArraySupport","arr","proto","createBuffer","length","buf","arg","encodingOrOffset","allocUnsafe","from","value","fromString","fromArrayView","isInstance","fromArrayBuffer","valueOf","b","fromObject","assertSize","size","alloc","fill","encoding","checked","string","byteLength","actual","fromArrayLike","array","i","arrayView","copy","byteOffset","obj","len","numberIsNaN","a","x","y","list","buffer","pos","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","start","end","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","m","str","max","target","thisStart","thisEnd","thisCopy","targetCopy","bidirectionalIndexOf","val","dir","arrayIndexOf","indexSize","arrLength","valLength","read","foundIndex","found","j","hexWrite","offset","remaining","strLen","parsed","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","utf16leToBytes","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","MAX_ARGUMENTS_LENGTH","codePoints","ret","out","hexSliceLookupTable","bytes","newBuf","checkOffset","ext","noAssert","mul","defineBigIntMethod","validateNumber","first","last","boundsError","lo","hi","checkInt","min","maxBytes","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","limit","sub","checkIEEE754","writeFloat","littleEndian","writeDouble","targetStart","code","errors","E","sym","getMessage","Base","name","range","input","msg","received","addNumericalSeparator","checkBounds","type","INVALID_BASE64_RE","base64clean","units","leadSurrogate","byteArray","c","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","init_esm_shims","init_esm_shims","init_esm_shims","E_TIMEOUT","E_ALREADY_LOCKED","E_CANCELED","__awaiter$2","thisArg","_arguments","P","generator","adopt","value","resolve","reject","fulfilled","step","e","rejected","result","Semaphore","_value","_cancelError","weight","callback","release","queue","entry","_a","queueEntry","previousValue","previousWeight","called","waiter","__awaiter$1","Mutex","cancelError","releaser","init_esm_shims","PostgresModFactory","postgresMod_default","parse_exports","__export","parseResults","init_esm_shims","messages_exports","__export","AuthenticationMD5Password","BackendKeyDataMessage","CommandCompleteMessage","CopyDataMessage","CopyResponse","DataRowMessage","DatabaseError","Field","NoticeMessage","NotificationResponseMessage","ParameterDescriptionMessage","ParameterStatusMessage","ReadyForQueryMessage","RowDescriptionMessage","bindComplete","closeComplete","copyDone","emptyQuery","noData","parseComplete","portalSuspended","replicationStart","init_esm_shims","message","length","name","chunk","binary","columnCount","tableID","columnID","dataTypeID","dataTypeSize","dataTypeModifier","format","fieldCount","parameterCount","parameterName","parameterValue","salt","processID","secretKey","processId","channel","payload","status","text","fields","types_exports","__export","ABSTIME","ACLITEM","BIT","BOOL","BPCHAR","BYTEA","CHAR","CID","CIDR","CIRCLE","DATE","FLOAT4","FLOAT8","GTSVECTOR","INET","INT2","INT4","INT8","INTERVAL","JSON","JSONB","MACADDR","MACADDR8","MONEY","NUMERIC","OID","PATH","PG_DEPENDENCIES","PG_LSN","PG_NDISTINCT","PG_NODE_TREE","POLYGON","REFCURSOR","REGCLASS","REGCONFIG","REGDICTIONARY","REGNAMESPACE","REGOPER","REGOPERATOR","REGPROC","REGPROCEDURE","REGROLE","REGTYPE","RELTIME","SMGR","TEXT","TID","TIME","TIMESTAMP","TIMESTAMPTZ","TIMETZ","TINTERVAL","TSQUERY","TSVECTOR","TXID_SNAPSHOT","UUID","VARBIT","VARCHAR","XID","XML","arrayTypes","parseArray","parseType","parsers","serializeType","serializerFor","serializerInstanceof","serializers","types","init_esm_shims","init_esm_shims","import_buffer","Buffer","BrowserBuffer","JSON_parse","JSON_stringify","BOOL","BYTEA","CHAR","INT8","INT2","INT4","REGPROC","TEXT","OID","TID","XID","CID","JSON","XML","PG_NODE_TREE","SMGR","PATH","POLYGON","CIDR","FLOAT4","FLOAT8","ABSTIME","RELTIME","TINTERVAL","CIRCLE","MACADDR8","MONEY","MACADDR","INET","ACLITEM","BPCHAR","VARCHAR","DATE","TIME","TIMESTAMP","TIMESTAMPTZ","INTERVAL","TIMETZ","BIT","VARBIT","NUMERIC","REFCURSOR","REGPROCEDURE","REGOPER","REGOPERATOR","REGCLASS","REGTYPE","UUID","TXID_SNAPSHOT","PG_LSN","PG_NDISTINCT","PG_DEPENDENCIES","TSVECTOR","TSQUERY","GTSVECTOR","REGCONFIG","REGDICTIONARY","JSONB","REGNAMESPACE","REGROLE","arrayTypes","types","x","n","Buffer","serializeArray","typeId","parser","parsers","parseArray","defaultHandlers","typeHandlers","serializers","serializerInstanceof","serializerFor","handler","Type","serializeType","setAllTypes","escapeElement","elementRepresentation","result","i","item","buf","value","char","str","quoted","last","p","loop","xs","parseType","type","k","to","from","serialize","parse","forceTo","theSerializer","f","parseResults","messages","options","blob","resultSets","currentResultSet","affectedRows","filteredMessages","msg","RowDescriptionMessage","DataRowMessage","CommandCompleteMessage","index","field","i","parseType","retrieveRowCount","parts","init_esm_shims","import_tinytar","loadExtensionBundle","bundlePath","IN_NODE","fs","zlib","Writable","pipeline","gunzip","chunks","chunk","_encoding","callback","response","decompressionStream","loadExtensions","mod","log","ext","blob","err","bytes","loadExtension","_ext","tinyTar","file","filePath","extOk","args","extFail","dirname","path","last","src_exports","__export","DatabaseError","parse","serialize","init_esm_shims","init_esm_shims","init_esm_shims","Writer","size","Buffer","remaining","oldBuffer","newSize","num","string","len","otherBuffer","code","length","result","writer","Writer","startup","opts","key","bodyBuffer","length","requestSsl","response","Buffer","password","sendSASLInitialResponseMessage","mechanism","initialResponse","sendSCRAMClientFinalMessage","additionalData","query","text","emptyArray","parse","name","types","len","buffer","i","paramWriter","writeValues","values","valueMapper","i","mappedVal","writer","paramWriter","Buffer","bind","config","portal","statement","binary","emptyArray","len","emptyExecute","execute","rows","portalLength","buff","cancel","processID","secretKey","buffer","cstringMessage","code","string","emptyDescribePortal","emptyDescribeStatement","describe","msg","close","text","copyData","chunk","copyFail","message","codeOnlyBuffer","flushBuffer","syncBuffer","endBuffer","copyDoneBuffer","serialize","startup","password","requestSsl","sendSASLInitialResponseMessage","sendSCRAMClientFinalMessage","query","parse","init_esm_shims","init_esm_shims","emptyBuffer","Buffer","BufferReader","offset","buffer","result","length","start","end","CODE_LENGTH","LEN_LENGTH","HEADER_LENGTH","emptyBuffer","Buffer","Parser","opts","emptyBuffer","BufferReader","buffer","callback","bufferFullLength","offset","HEADER_LENGTH","code","length","CODE_LENGTH","fullMessageLength","message","newLength","newBuffer","newBufferLength","Buffer","bytes","bindComplete","parseComplete","closeComplete","noData","portalSuspended","copyDone","replicationStart","emptyQuery","DatabaseError","status","ReadyForQueryMessage","text","CommandCompleteMessage","chunk","CopyDataMessage","messageName","isBinary","columnCount","CopyResponse","i","processId","channel","payload","NotificationResponseMessage","fieldCount","RowDescriptionMessage","name","tableID","columnID","dataTypeID","dataTypeSize","dataTypeModifier","mode","Field","parameterCount","ParameterDescriptionMessage","fields","len","DataRowMessage","value","ParameterStatusMessage","processID","secretKey","BackendKeyDataMessage","salt","AuthenticationMD5Password","mechanism","fieldType","messageValue","NoticeMessage","parse","stream","callback","parser","Parser","buffer","resolve","_ready","_closing","_closed","_inTransaction","_relaxedDurability","_queryMutex","_transactionMutex","_fsSyncMutex","_fsSyncScheduled","_extensions","_extensionsClose","_parser","_queryReadBuffer","_queryWriteChunks","_notifyListeners","_globalNotifyListeners","_PGlite_instances","init_fn","runQuery_fn","runExec_fn","handleBlob_fn","cleanupBlob_fn","checkReady_fn","execProtocolNoSync_fn","syncToFs_fn","log_fn","_PGlite","dataDirOrPGliteOptions","options","__privateAdd","Mutex","Parser","__privateSet","__privateMethod","pg","__privateGet","closeFn","serialize","err","query","params","callback","closed","checkClosed","result","e","message","syncToFs","msg_len","mod","msg_start","msg_end","data","onNotice","results","Buffer","msg","DatabaseError","NoticeMessage","CommandCompleteMessage","NotificationResponseMessage","listeners","cb","channel","compression","dbname","dataDir","fsType","parseDataDir","loadFs","extensionBundlePromises","extensionInitFns","args","PGDATA","WASM_PREFIX","emscriptenOpts","makeLocateFile","devId","devOpt","_stream","buffer","offset","length","position","buf","contents","size","i","_position","stream","whence","extName","ext","loadExtensionBundle","extRet","instance","postgresMod_default","loadTar","loadExtensions","idb","pguser","pgdatabase","initFn","parsedParams","p","serializeType","type","val","blob","parseResults","doSync","PGlite","init_esm_shims"]}