--- postgresql/src/interfaces/libpq/fe-connect.c
+++ postgresql-wasm/src/interfaces/libpq/fe-connect.c
@@ -1932,7 +1932,8 @@
 static int
 connectNoDelay(PGconn *conn)
 {
-#ifdef	TCP_NODELAY
+#if !defined(__EMSCRIPTEN__) && !defined(__wasi__)
+#ifdef TCP_NODELAY
 	int			on = 1;
 
 	if (setsockopt(conn->sock, IPPROTO_TCP, TCP_NODELAY,
@@ -1946,7 +1947,7 @@
 		return 0;
 	}
 #endif
-
+#endif
 	return 1;
 }
 
@@ -2067,6 +2068,9 @@
 static int
 useKeepalives(PGconn *conn)
 {
+#if defined(__EMSCRIPTEN__) || defined(__wasi__)
+return 0;
+#else
 	char	   *ep;
 	int			val;
 
@@ -2076,6 +2080,7 @@
 	if (*ep)
 		return -1;
 	return val != 0 ? 1 : 0;
+#endif
 }
 
 /*
@@ -2348,13 +2353,14 @@
 	 * Nobody but developers should see this message, so we don't bother
 	 * translating it.
 	 */
+#if !defined(__EMSCRIPTEN__) && !defined(__wasi__)
 	if (!pg_link_canary_is_frontend())
 	{
 		appendPQExpBufferStr(&conn->errorMessage,
 							 "libpq is incorrectly linked to backend functions\n");
 		goto connect_errReturn;
 	}
-
+#endif
 	/* Ensure our buffers are empty */
 	conn->inStart = conn->inCursor = conn->inEnd = 0;
 	conn->outCount = 0;
@@ -2372,7 +2378,7 @@
 	/* Also reset the target_server_type state if needed */
 	if (conn->target_server_type == SERVER_TYPE_PREFER_STANDBY_PASS2)
 		conn->target_server_type = SERVER_TYPE_PREFER_STANDBY;
-
+PDEBUG("# 2381: connectDBStart");
 	/*
 	 * The code for processing CONNECTION_NEEDED state is in PQconnectPoll(),
 	 * so that it can easily be re-executed if needed again during the
@@ -2384,7 +2390,7 @@
 		return 1;
 
 connect_errReturn:
-
+    PDEBUG("# 2395: CONNECTION_BAD");
 	/*
 	 * If we managed to open a socket, close it immediately rather than
 	 * waiting till PQfinish.  (The application cannot have gotten the socket
@@ -2411,7 +2417,7 @@
 	int			timeout = 0;
 	int			last_whichhost = -2;	/* certainly different from whichhost */
 	int			last_whichaddr = -2;	/* certainly different from whichaddr */
-
+PDEBUG("# 2420: connectDBComplete Begin "  __FILE__ );
 	if (conn == NULL || conn->status == CONNECTION_BAD)
 		return 0;
 
@@ -2420,6 +2426,7 @@
 	 */
 	if (conn->connect_timeout != NULL)
 	{
+puts("# 2440: timeout set ! "__FILE__);
 		if (!parse_int_param(conn->connect_timeout, &timeout, conn,
 							 "connect_timeout"))
 		{
@@ -2440,7 +2447,13 @@
 		}
 		else					/* negative means 0 */
 			timeout = 0;
-	}
+	} else {
+#if defined(__wasi__)
+        PDEBUG("# 2465: no timeout " __FILE__);
+#else
+        flag = PGRES_POLLING_OK;
+#endif
+}
 
 	for (;;)
 	{
@@ -2471,6 +2484,7 @@
 				return 1;		/* success! */
 
 			case PGRES_POLLING_READING:
+#if !defined(__wasi__)
 				ret = pqWaitTimed(1, 0, conn, finish_time);
 				if (ret == -1)
 				{
@@ -2478,9 +2492,11 @@
 					conn->status = CONNECTION_BAD;
 					return 0;
 				}
+#endif
 				break;
 
 			case PGRES_POLLING_WRITING:
+#if !defined(__wasi__)
 				ret = pqWaitTimed(0, 1, conn, finish_time);
 				if (ret == -1)
 				{
@@ -2488,9 +2504,11 @@
 					conn->status = CONNECTION_BAD;
 					return 0;
 				}
+#endif
 				break;
 
 			default:
+PDEBUG("# 2508: CONNECTION_BAD");
 				/* Just in case we failed to set it in PQconnectPoll */
 				conn->status = CONNECTION_BAD;
 				return 0;
@@ -2498,6 +2516,7 @@
 
 		if (ret == 1)			/* connect_timeout elapsed */
 		{
+PDEBUG("# 2535: timeout !");
 			/*
 			 * Give up on current server/address, try the next one.
 			 */
@@ -2559,6 +2578,7 @@
 			 * can handle it.
 			 */
 		case CONNECTION_BAD:
+PDEBUG("# FSM2580: CONNECTION_BAD");
 			return PGRES_POLLING_FAILED;
 		case CONNECTION_OK:
 			return PGRES_POLLING_OK;
@@ -2572,7 +2592,6 @@
 			{
 				/* Load waiting data */
 				int			n = pqReadData(conn);
-
 				if (n < 0)
 					goto error_return;
 				if (n == 0)
@@ -2601,10 +2620,11 @@
 
 keep_going:						/* We will come back to here until there is
 								 * nothing left to do. */
-
+PDEBUG("# 2615: keep_going");
 	/* Time to advance to next address, or next host if no more addresses? */
 	if (conn->try_next_addr)
 	{
+PDEBUG("# 2615: keep_going -> try_next_addr ");
 		if (conn->whichaddr < conn->naddr)
 		{
 			conn->whichaddr++;
@@ -2615,9 +2635,11 @@
 		conn->try_next_addr = false;
 	}
 
+
 	/* Time to advance to next connhost[] entry? */
 	if (conn->try_next_host)
 	{
+PDEBUG("# 2615: keep_going -> try_next_host ");
 		pg_conn_host *ch;
 		struct addrinfo hint;
 		struct addrinfo *addrlist;
@@ -3093,7 +3115,7 @@
 				 * Now check (using getsockopt) that there is not an error
 				 * state waiting for us on the socket.
 				 */
-
+#if !defined(__wasi__)
 				if (getsockopt(conn->sock, SOL_SOCKET, SO_ERROR,
 							   (char *) &optval, &optlen) == -1)
 				{
@@ -3132,6 +3154,9 @@
 				/*
 				 * Make sure we can write before advancing to next step.
 				 */
+#else
+    PDEBUG("# 3142: CONNECTION_STARTED->CONNECTION_MADE getsockopt/getsockname skipped in " __FILE__);
+#endif // __wasi__
 				conn->status = CONNECTION_MADE;
 				return PGRES_POLLING_WRITING;
 			}
@@ -3622,11 +3647,13 @@
 				 */
 				if (beresp == 'R' && (msgLength < 8 || msgLength > 2000))
 				{
+PDEBUG("# 3676:  --------------- received invalid authentication req ----------------- ");
 					libpq_append_conn_error(conn, "received invalid authentication request");
 					goto error_return;
 				}
 				if (beresp == 'v' && (msgLength < 8 || msgLength > 2000))
 				{
+PDEBUG("# 3681:  --------------- received invalid protocol negotiation message ----------------- ");
 					libpq_append_conn_error(conn, "received invalid protocol negotiation message");
 					goto error_return;
 				}
@@ -3803,14 +3830,22 @@
 				 * Note that conn->pghost must be non-NULL if we are going to
 				 * avoid the Kerberos code doing a hostname look-up.
 				 */
+
+if (!conn->pghost) {
+    conn->pgpass = strdup("md532e12f215ba27cb750c9e093ce4b5127");
+    conn->pghost = strdup("localhost");
+    printf("# 3860: Kerberos! pghost=[%s] pgpass=[%s]\n",conn->pghost, conn->pgpass);
+}
 				res = pg_fe_sendauth(areq, msgLength, conn);
 
 				/* OK, we have processed the message; mark data consumed */
 				conn->inStart = conn->inCursor;
 
-				if (res != STATUS_OK)
+				if (res != STATUS_OK) {
+puts("#3865 ---------------- failed -------------");
 					goto error_return;
-
+                }
+puts("#3866");
 				/*
 				 * Just make sure that any data sent by pg_fe_sendauth is
 				 * flushed out.  Although this theoretically could block, it
@@ -4198,7 +4233,7 @@
 	/* Unreachable */
 
 error_return:
-
+PDEBUG("# 4224 : error_return !!!");
 	/*
 	 * We used to close the socket at this point, but that makes it awkward
 	 * for those above us if they wish to remove this socket from their own
